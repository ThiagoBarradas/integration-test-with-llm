test_cases:
  - id: TC001
    group: User
    name: Create User When Valid Data Returns OK
    description: Criação de um usuário com dados válidos.
    endpoint: /users
    method: POST
    request_body:
      nickname: "validNickname1"
      password: "ValidPass1"
    expected_response:
      status_code: 200
  - id: TC002
    group: User
    name: Create User When Nickname Already Exists Returns BadRequest
    description: Tentativa de criar um usuário com um nickname que já existe.
    endpoint: /users
    method: POST
    preconditions:
      - "Usuário com nickname 'existingNick' já existe no sistema."
    request_body:
      nickname: "existingNick"
      password: "ValidPass1"
    expected_response:
      status_code: 400
  - id: TC003
    group: User
    name: Create User When Invalid Nickname Format Returns BadRequest
    description: Criação de usuário com nickname inválido (contém caracteres especiais).
    endpoint: /users
    method: POST
    request_body:
      nickname: "invalid!Nick"
      password: "ValidPass1"
    expected_response:
      status_code: 400
  - id: TC004
    group: User
    name: Create User When Nickname Is Null Returns BadRequest
    description: Criação de usuário com nickname nulo.
    endpoint: /users
    method: POST
    request_body:
      nickname: null
      password: "ValidPass1"
    expected_response:
      status_code: 400
  - id: TC005
    group: User
    name: Create User When Nickname Is Empty String Returns BadRequest
    description: Criação de usuário com nickname vazio.
    endpoint: /users
    method: POST
    request_body:
      nickname: ""
      password: "ValidPass1"
    expected_response:
      status_code: 400
  - id: TC006
    group: User
    name: Create User When Nickname Too Short Returns BadRequest
    description: Criação de usuário com nickname curto - 9 caracteres.
    endpoint: /users
    method: POST
    request_body:
      nickname: "invalidNi"
      password: "ValidPass1"
    expected_response:
      status_code: 400
  - id: TC007
    group: User
    name: Create User When Nickname Too Long Returns BadRequest
    description: Criação de usuário com nickname longo - 33 caracteres.
    endpoint: /users
    method: POST
    request_body:
      nickname: "validNick1abcabcabcdabcabcabcd123"
      password: "ValidPass1"
    expected_response:
      status_code: 400
  - id: TC008
    group: User
    name: Create User When Nickname Has Minimum Size Returns OK
    description: Criação de usuário com nickname com menor tamanho possível - 10 caracteres.
    endpoint: /users
    method: POST
    request_body:
      nickname: "validNick0"
      password: "ValidPass1"
    expected_response:
      status_code: 200
  - id: TC009
    group: User
    name: Create User When Nickname Has Maximum Size Returns OK
    description: Criação de usuário com nickname com maior tamanho possível - 32 caracteres.
    endpoint: /users
    method: POST
    request_body:
      nickname: "validNick1abcabcabcdabcabcabcd12"
      password: "ValidPass1"
    expected_response:
      status_code: 200
  - id: TC010
    group: User
    name: Create User When Password Is Null Returns BadRequest
    description: Criação de usuário com senha nula.
    endpoint: /users
    method: POST
    request_body:
      nickname: "validNick1"
      password: null
    expected_response:
      status_code: 400
  - id: TC011
    group: User
    name: Create User When Password Is Empty String Returns BadRequest
    description: Criação de usuário com senha vazia.
    endpoint: /users
    method: POST
    request_body:
      nickname: "validNick2"
      password: ""
    expected_response:
      status_code: 400
  - id: TC012
    group: User
    name: Create User When Password Too Short Returns BadRequest
    description: Criação de usuário com senha curta - 5 caracteres.
    endpoint: /users
    method: POST
    request_body:
      nickname: "validNick3"
      password: "Abcd1"
    expected_response:
      status_code: 400
  - id: TC013
    group: User
    name: Create User When Password Too Long Returns BadRequest
    description: Criação de usuário com senha longa - 21 caracteres.
    endpoint: /users
    method: POST
    request_body:
      nickname: "validNick4"
      password: "Ab1Abc2bc2bc2bc2bc2bc"
    expected_response:
      status_code: 400
  - id: TC014
    group: User
    name: Create User When Password Has Minimum Size Returns OK
    description: Criação de usuário com senha com menor tamanho possível - 6 caracteres.
    endpoint: /users
    method: POST
    request_body:
      nickname: "validNick5"
      password: "Abcde1"
    expected_response:
      status_code: 200    
  - id: TC015
    group: User
    name: Create User When Password Has Maximum Size Returns OK
    description: Criação de usuário com senha com maior tamanho possível - 20 caracteres.
    endpoint: /users
    method: POST
    request_body:
      nickname: "validNick6"
      password: "Ab1Abc2bc2bc2bc2bc2b"
    expected_response:
      status_code: 200    
  - id: TC016
    group: User
    name: Create User When Password Missing Uppercase Letter Returns BadRequest
    description: Criação de usuário com senha sem letra maiúscula.
    endpoint: /users
    method: POST
    request_body:
      nickname: "validNick7"
      password: "validpass1"
    expected_response:
      status_code: 400
  - id: TC017
    group: User
    name: Create User When Password Missing Lowercase Letter Returns BadRequest
    description: Criação de usuário com senha sem letra minúscula.
    endpoint: /users
    method: POST
    request_body:
      nickname: "validNick8"
      password: "VALIDPASS1"
    expected_response:
      status_code: 400
  - id: TC018
    group: User
    name: Create User When Password Missing Digit Returns BadRequest
    description: Criação de usuário com senha sem dígito.
    endpoint: /users
    method: POST
    request_body:
      nickname: "validNick9"
      password: "ValidPassX"
    expected_response:
      status_code: 400
  - id: TC019
    group: User
    name: Authenticate User When Valid Data Returns OK
    description: Autenticação de usuário com credenciais válidas.
    endpoint: /users/token
    method: POST
    preconditions:
      - "Usuário com nickname 'validNick10' e senha 'ValidPass1' existe."
    request_body:
      nickname: "validNick10"
      password: "ValidPass1"
    expected_response:
      status_code: 200
      body:
        token: is string not empty
  - id: TC020
    group: User
    name: Authenticate User When Invalid Password Returns BadRequest
    description: Autenticação de usuário com senha inválida.
    prconditions:
      - "Usuário com nickname 'validNick11' e senha 'ValidPass1' existe."
    endpoint: /users/token
    method: POST
    request_body:
      nickname: "validNick11"
      password: "WrongPass1"
    expected_response:
      status_code: 400
  - id: TC021
    group: User
    name: Authenticate User When Invalid Nickname Returns BadRequest
    description: Autenticação de usuário com usuário inválido.
    preconditions:
      - "Usuário com nickname 'validNick12' e senha 'ValidPass1' existe."
    endpoint: /users/token
    method: POST
    request_body:
      nickname: "validNickname12"
      password: "ValidPass1"
    expected_response:
      status_code: 400
  - id: TC022
    group: People
    name: Create Person When Valid Data Returns Created
    description: Criação de pessoa com dados válidos.
    preconditions:
      - "Usuário com nickname 'validNick13' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick13'"
    endpoint: /people
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      name: "John Doe"
      age: 30
    expected_response:
      status_code: 201
      body:
        id: is integer greater than 0
        name: "John Doe"
        age: 30
  - id: TC023
    group: People
    name: Create Person When Name Is Null Returns BadRequest
    description: Criação de pessoa com nome nulo.
    preconditions:
      - "Usuário com nickname 'validNick14' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick14'"
    endpoint: /people
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      name: null
      age: 30
    expected_response:
      status_code: 400
  - id: TC024
    group: People
    name: Create Person When Name Is Empty String Returns BadRequest
    description: Criação de pessoa com nome vazio.
    preconditions:
      - "Usuário com nickname 'validNick15' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick15'"
    endpoint: /people
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      name: ""
      age: 30
    expected_response:
      status_code: 400
  - id: TC025
    group: People
    name: Create Person When Name Too Short Returns BadRequest
    description: Criação de pessoa com nome curto - 0 caracteres.
    preconditions:
      - "Usuário com nickname 'validNick16' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick16'"
    endpoint: /people
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      name: ""
      age: 30
    expected_response:
      status_code: 400
  - id: TC026
    group: People
    name: Create Person When Name Too Long Returns BadRequest
    description: Criação de pessoa com nome longo - 129 caracteres.
    preconditions:
      - "Usuário com nickname 'validNick17' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick17'"
    endpoint: /people
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      name: "John Doe abcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcg"
      age: 30
    expected_response:
      status_code: 400
  - id: TC027
    group: People
    name: Create Person When Name Has Minimum Size Returns Created
    description: Criação de pessoa com nome com menor tamanho possível - 1 caracteres.
    preconditions:
      - "Usuário com nickname 'validNick18' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick18'"
    endpoint: /people
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      name: "J"
      age: 30
    expected_response:
      status_code: 201  
      body:
        id: is integer greater than 0
        name: "Joh"
        age: 30            
  - id: TC028
    group: People
    name: Create Person When Name Has Maximum Size Returns Created
    description: Criação de pessoa com nome com maior tamanho possível - 128 caracteres.
    preconditions:
      - "Usuário com nickname 'validNick19' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick19'"
    endpoint: /people
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      name: "John Doeabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcg"
      age: 30
    expected_response:
      status_code: 201  
      body:
        id: is integer greater than 0
        name: "John Doeabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcgabcabcabcg"
        age: 30      
  - id: TC029
    group: People
    name: Create Person When Age Is Null Returns BadRequest
    description: Criação de pessoa com idade nula.
    preconditions:
      - "Usuário com nickname 'validNick20' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick20'"
    endpoint: /people
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      name: "John Doe"
      age: null
    expected_response:
      status_code: 400
  - id: TC030
    group: People
    name: Create Person When Age Below Minimum Returns BadRequest
    description: Criação de pessoa com idade abaixo do minimo - -1.
    preconditions:
      - "Usuário com nickname 'validNick21' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick21'"
    endpoint: /people
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      name: "John Doe"
      age: -1
    expected_response:
      status_code: 400
  - id: TC031
    group: People
    name: Create Person When Age Above Maximum Returns BadRequest
    description: Criação de pessoa com idade acima do máximo - 151.
    preconditions:
      - "Usuário com nickname 'validNick22' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick22'"
    endpoint: /people
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      name: "John Doe"
      age: 151
    expected_response:
      status_code: 400
  - id: TC032
    group: People
    name: Create Person When Age Has Minimum Value Returns Created
    description: Criação de pessoa com idade com menor valor possível - 0.
    preconditions:
      - "Usuário com nickname 'validNick23' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick23'"
    endpoint: /people
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      name: "John Doe"
      age: 0
    expected_response:
      status_code: 201  
      body:
        id: is integer greater than 0
        name: "John Doe"
        age: 0            
  - id: TC033
    group: People
    name: Create Person When Age Has Maximum Value Returns Created
    description: Criação de pessoa com idade com maior valor possível - 150.
    preconditions:
      - "Usuário com nickname 'validNick24' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick24'"
    endpoint: /people
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      name: "John Doe"
      age: 150
    expected_response:
      status_code: 201
      body:
        id: is integer greater than 0
        name: "John Doe"
        age: 150  
  - id: TC034
    group: People
    name: Create Person When Token Is Invalid Returns Unauthorized
    description: Criação de pessoa com token inválido.
    endpoint: /people
    method: POST
    headers:
      Authorization: "Bearer invalidtoken"
    request_body:
      name: "John Doe"
      age: 30
    expected_response:
      status_code: 401
  - id: TC035
    group: People
    name: Create Person When Without Token Returns Unauthorized
    description: Criação de pessoa sem token.
    endpoint: /people
    method: POST
    request_body:
      name: "John Doe"
      age: 30
    expected_response:
      status_code: 401
  - id: TC036
    group: People
    name: Get Person When Valid Data Returns OK
    description: Obter pessoa existente pelo ID.
    preconditions:
      - "Usuário com nickname 'validNick25' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick25'"
      - "Existe uma pessoa criada com name 'John Doe' e idade 30 com id armazenado em {person_id}"
    endpoint: /people/{person_id}
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
      body:
        id: {person_id}
        name: "John Doe"
        age: 30
  - id: TC037
    group: People
    name: Get Person When ID Not Exists Returns NotFound
    description: Tentativa de obter pessoa com ID que não existe.
    preconditions:
      - "Usuário com nickname 'validNick26' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick26'"
    endpoint: /people/9999999
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 404
  - id: TC038
    group: People
    name: Get Person When Token Is Invalid Returns Unauthorized
    description: Tentativa de obter pessoa com token inválido.
    endpoint: /people/1
    method: GET
    headers:
      Authorization: "Bearer invalidtoken"
    expected_response:
      status_code: 401
  - id: TC039
    group: People
    name: Get Person When Without Token Returns Unauthorized
    description: Tentativa de obter pessoa sem token.
    endpoint: /people/1
    method: GET
    expected_response:
      status_code: 401
  - id: TC040
    group: People
    name: Get Person When Token From Other User Returns NotFound
    description: Tentativa de obter pessoa existente pelo ID com token de outro usuário.
    preconditions:
      - "Usuário com nickname 'validNick27' e senha 'ValidPass1' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com nickname 'validNick27'"
      - "Existe uma pessoa criada pelo usuário 'validNick27' com name 'John Doe' e idade 30 com id armazenado em {person_id}"
      - "Usuário com nickname 'validNick28' e senha 'ValidPass2' existe."
      - "Existe um token de autenticação {other_valid_token} válido para o usuário com nickname 'validNick28'"
    endpoint: /people/{person_id}
    method: GET
    headers:
      Authorization: "Bearer {other_valid_token}"
    expected_response:
      status_code: 404
  - id: TC041
    group: App
    name: Update App Logo With Valid Content Type Returns OK
    description: Atualiza o logo do app com uma imagem
    endpoint: /app/logo
    method: PUT
    form_data: 
      file: <somefile.jpg>
    expected_response:
      status_code: 200
  - id: TC042
    group: App
    name: Update App Logo With Invalid Content Type Returns UnsupportedMediaType
    description: Tentativa de atualizar o logo do app com um json
    endpoint: /app/logo
    method: PUT
    request_body: 
      file: somefile.jpg
    expected_response:
      status_code: 415