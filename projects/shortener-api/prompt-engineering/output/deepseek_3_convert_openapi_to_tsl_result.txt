<think>
Okay, vou começar analisando a especificação OpenAPI fornecida para gerar os casos de teste TSL. Primeiro, preciso entender cada endpoint e suas operações. 

O endpoint GET "/{token}" retorna uma URL original com base em um token. Os possíveis códigos de resposta são 200 (OK) e 404 (Not Found). Para este endpoint, preciso testar diferentes cenários: token válido existente, token inexistente, token inválido (caracteres especiais, strings vazias,etc), e casos de token em formatos incorretos.

O endpoint POST "/api/url-shorts" cria uma URL encurtada. Os campos obrigatórios são "url" e "hasQrCode". "url" deve ter pelo menos 1 caractere e ser uma URL válida. "expireMinutes" pode ser nulo ou maior/igual a 1. "hasQrCode" é booleano. Aqui, vou considerar testes para URLs válidas e inválidas, expireMinutes nulo, válido, inválido (0, negativo), e combinações desses parâmetros. Também testar se a resposta inclui qrCode quando solicitado.

O endpoint GET "/test" retorna um token. Precisa verificar se a resposta tem o formato correto.

Vou listar todos os casos possíveis para cada endpoint, aplicando teste de limites, classes de equivalência e requisitos obrigatórios. Devo garantir todos os caminhos do código sejam cobertos, incluindo erros e sucessos.

Por exemplo, para o POST "/api/url-shorts": testar URL vazia, URL inválida, expireMinutes = null, 1, 0, -1; combinar com hasQrCode verdadeiro e falso. Para GET "/{token}", testar diferentes formatos de token, existente e não existente.

Também verificar os schemas das respostas para garantir os campos corretos. Cada caso deve ter group, name, description, endpoint, method, request_body (se aplicável) e expected_response com status_code e body quando necessário.

Garantir que cada parâmetro é testado em seus limites e valores inválidos. Por exemplo, token com caracteres especiais, URLs com formatos inválidos, expireMinutes fora do permitido.

Assim, construo cada caso de teste no TSL seguindo os exemplos anteriores, assegurando a máxima cobertura.
</think>

test_cases:
  - id: TC001
    group: Url Shorten Endpoint
    name: Redirect when valid token returns OK
    description: Redirecionamento com token válido existente
    endpoint: /validToken123
    method: GET
    preconditions:
      - "Token 'validToken123' existe no sistema mapeando para 'https://exemplo.com'"
    expected_response:
      status_code: 200
      body:
        url: "https://exemplo.com"

  - id: TC002
    group: Url Shorten Endpoint
    name: Redirect when non-existent token returns NotFound
    description: Tentativa de redirecionamento com token inexistente
    endpoint: /inexistentToken
    method: GET
    expected_response:
      status_code: 404
      body:
        statusCode: 404

  - id: TC003
    group: Url Shorten Endpoint
    name: Redirect when empty token returns BadRequest
    description: Token vazio na URL
    endpoint: /
    method: GET
    expected_response:
      status_code: 404

  - id: TC004
    group: Url Shorten Endpoint
    name: Redirect when invalid token format returns BadRequest
    description: Token com caracteres inválidos
    endpoint: /token!@invalid
    method: GET
    expected_response:
      status_code: 404

  - id: TC005
    group: Url Shorten Endpoint
    name: Create short url with valid data returns OK
    description: Criação de URL curta com dados válidos
    endpoint: /api/url-shorts
    method: POST
    request_body:
      url: "https://validexample.com"
      hasQrCode: true
    expected_response:
      status_code: 200
      body:
        token: is string not empty
        shortenedUrl: contains "http"
        qrCode: is string not empty

  - id: TC006
    group: Url Shorten Endpoint
    name: Create short url with invalid url returns BadRequest
    description: URL inválida no payload
    endpoint: /api/url-shorts
    method: POST
    request_body:
      url: "invalidurl"
      hasQrCode: false
    expected_response:
      status_code: 400
      body:
        statusCode: 400

  - id: TC007
    group: Url Shorten Endpoint
    name: Create short url with empty url returns BadRequest
    description: Campo url vazio
    endpoint: /api/url-shorts
    method: POST
    request_body:
      url: ""
      hasQrCode: true
    expected_response:
      status_code: 400

  - id: TC008
    group: Url Shorten Endpoint
    name: Create short url with minimum expire minutes returns OK
    description: Tempo de expiração mínimo válido
    endpoint: /api/url-shorts
    method: POST
    request_body:
      url: "https://example.com"
      expireMinutes: 1
      hasQrCode: false
    expected_response:
      status_code: 200
      body:
        qrCode: null

  - id: TC009
    group: Url Shorten Endpoint
    name: Create short url with null expire minutes returns OK
    description: Expiração nula (permanente)
    endpoint: /api/url-shorts
    method: POST
    request_body:
      url: "http://permanent.com"
      expireMinutes: null
      hasQrCode: true
    expected_response:
      status_code: 200
      body:
        qrCode: is string not empty

  - id: TC010
    group: Url Shorten Endpoint
    name: Create short url with invalid expire minutes returns BadRequest
    description: Valor de expiração abaixo do limite
    endpoint: /api/url-shorts
    method: POST
    request_body:
      url: "https://test.com"
      expireMinutes: 0
      hasQrCode: false
    expected_response:
      status_code: 400

  - id: TC011
    group: Url Shorten Endpoint
    name: Create short url without required fields returns BadRequest
    description: Falta de campos obrigatórios no payload
    endpoint: /api/url-shorts
    method: POST
    request_body: {}
    expected_response:
      status_code: 400

  - id: TC012
    group: Url Shorten Endpoint
    name: Create short url with extra properties returns BadRequest
    description: Campos adicionais não permitidos
    endpoint: /api/url-shorts
    method: POST
    request_body:
      url: "https://test.com"
      hasQrCode: true
      extraField: "value"
    expected_response:
      status_code: 400

  - id: TC013
    group: Url Shorten Endpoint
    name: Generate qr code when hasQrCode true returns in response
    description: Verificação de geração de QR code
    endpoint: /api/url-shorts
    method: POST
    request_body:
      url: "https://qrexample.com"
      hasQrCode: true
    expected_response:
      status_code: 200
      body:
        qrCode: is string not empty

  - id: TC014
    group: Url Shorten Endpoint
    name: Omit qr code when hasQrCode false returns null
    description: Ausência de QR code no response
    endpoint: /api/url-shorts
    method: POST
    request_body:
      url: "http://noqr.com"
      hasQrCode: false
    expected_response:
      status_code: 200
      body:
        qrCode: null

  - id: TC015
    group: Web
    name: Test endpoint returns valid response
    description: Verificação do endpoint de teste
    endpoint: /test
    method: GET
    expected_response:
      status_code: 200
      body:
        token: is string not empty

  - id: TC016
    group: Url Shorten Endpoint
    name: Create short url with maximum url length returns OK
    description: URL com comprimento máximo permitido
    endpoint: /api/url-shorts
    method: POST
    request_body:
      url: "https://example.com/" + "a".repeat(2040)
      hasQrCode: true
    expected_response:
      status_code: 200

  - id: TC017
    group: Url Shorten Endpoint
    name: Redirect expired token returns NotFound
    description: Token com expiração válida mas expirado
    endpoint: /expiredToken
    method: GET
    preconditions:
      - "Token 'expiredToken' existe com expireMinutes=1 (já expirado)"
    expected_response:
      status_code: 404

  - id: TC018
    group: Url Shorten Endpoint
    name: Create short url with special characters in url returns OK
    description: URL com caracteres especiais codificados
    endpoint: /api/url-shorts
    method: POST
    request_body:
      url: "https://exemplo.com/path?query=param&value=áéíóú"
      hasQrCode: false
    expected_response:
      status_code: 200

  - id: TC019
    group: Url Shorten Endpoint
    name: Create short url with different http schemes returns OK
    description: Teste com vários protocolos HTTP válidos
    endpoint: /api/url-shorts
    method: POST
    request_body:
      url: "ftp://example.com"
      hasQrCode: true
    expected_response:
      status_code: 400

  - id: TC020
    group: Url Shorten Endpoint
    name: Verify shortened url format returns valid
    description: Verificação do formato da URL encurtada
    endpoint: /api/url-shorts
    method: POST
    request_body:
      url: "https://format-test.com"
      hasQrCode: false
    expected_response:
      status_code: 200
      body:
        shortenedUrl: matches regex "http(s)?://.*/\\w+"