```csharp
// File: ProductsIntegrationTests.cs

using Microsoft.AspNetCore.Mvc.Testing;
using System.Net.Http.Json;
using System.Net;
using System.Text.Json.Nodes;
using System.IO;

namespace IntegrationTests
{
    public class ProductsIntegrationTests : IClassFixture<WebApplicationFactory<Program>>
    {
        private readonly WebApplicationFactory<Program> _factory;
        private readonly HttpClient _client;

        public ProductsIntegrationTests(WebApplicationFactory<Program> factory)
        {
            _factory = factory;
            _client = _factory.CreateClient();
        }

        private async Task<HttpResponseMessage> CreateCategoryAsync(string name)
        {
            var request = new { name = name };
            return await _client.PostAsJsonAsync("/api/categories", request);
        }

        private async Task<HttpResponseMessage> GetProductsAsync(int? categoryId = null, int? page = 1, int? itemsPerPage = 10)
        {
            var request = "/api/products";
            if (categoryId != null || page != null || itemsPerPage != null)
            {
                var query = new Dictionary<string, string?>()
                {
                    { "categoryId", categoryId?.ToString() },
                    { "page", page?.ToString() },
                    { "itemsPerPage", itemsPerPage?.ToString() }
                }
                .Where(pair => pair.Value != null)
                .Select(pair => $"{pair.Key}={pair.Value}")
                .Aggregate((current, next) => current + "&" + next);

                request += "?" + query;
            }

            return await _client.GetAsync(request);
        }

        private async Task<HttpResponseMessage> CreateProductAsync(string name, int quantityInPackage, string unitOfMeasurement, int categoryId)
        {
            var request = new
            {
                name = name,
                quantityInPackage = quantityInPackage,
                unitOfMeasurement = unitOfMeasurement,
                categoryId = categoryId
            };

            return await _client.PostAsJsonAsync("/api/products", request);
        }

        private async Task<HttpResponseMessage> UpdateProductAsync(int id, string name, int quantityInPackage, string unitOfMeasurement, int categoryId)
        {
            var request = new
            {
                name = name,
                quantityInPackage = quantityInPackage,
                unitOfMeasurement = unitOfMeasurement,
                categoryId = categoryId
            };

            return await _client.PutAsJsonAsync($"/api/products/{id}", request);
        }

        private async Task<HttpResponseMessage> DeleteProductAsync(int id)
        {
            return await _client.DeleteAsync($"/api/products/{id}");
        }

        [Fact]
        public async Task TC010_List_All_Products_Returns_OK()
        {
            // act
            var response = await GetProductsAsync();

            // assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var body = await response.Content.ReadFromJsonAsync<JsonObject>();
            Assert.NotNull(body);
            Assert.True(body["totalItems"].AsValue().GetValue<int>() >= 0);
            Assert.NotNull(body["items"]);
        }

        [Fact]
        public async Task TC011_Save_Valid_Product_Returns_OK()
        {
            // arrange
            string productName = "New Product";
            int quantityInPackage = 10;
            string unitOfMeasurement = "Gram";
            int validCategoryId = await CreateCategoryAndGetIdAsync("New Category"); // Ensure category exists for the product

            // act
            var response = await CreateProductAsync(productName, quantityInPackage, unitOfMeasurement, validCategoryId);
            
            // assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var body = await response.Content.ReadFromJsonAsync<JsonObject>();
            Assert.True(body["id"].AsValue().GetValue<int>() > 0);
            Assert.Equal(productName, body["name"].AsValue().GetValue<string>());
            Assert.Equal(quantityInPackage, body["quantityInPackage"].AsValue().GetValue<int>());
            Assert.Equal(unitOfMeasurement, body["unitOfMeasurement"].AsValue().GetValue<string>());
        }

        [Fact]
        public async Task TC012_Save_Product_With_Invalid_CategoryID_Returns_BadRequest()
        {
            // arrange
            string productName = "New Product";
            int quantityInPackage = 10;
            string unitOfMeasurement = "Gram";
            int invalidCategoryId = 9999; // Assuming 9999 is an invalid category ID

            // act
            var response = await CreateProductAsync(productName, quantityInPackage, unitOfMeasurement, invalidCategoryId);

            // assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }

        [Fact]
        public async Task TC013_Update_Valid_Product_Returns_OK()
        {
            // arrange
            var categoryId = await CreateCategoryAndGetIdAsync("New Category");
            var createResponse = await CreateProductAsync("New Product", 10, "Gram", categoryId);
            var body = await createResponse.Content.ReadFromJsonAsync<JsonObject>();
            int productId = body["id"].AsValue().GetValue<int>();
            string newName = "Updated Product";
            int newQuantityInPackage = 20;
            string newUnitOfMeasurement = "Kilogram";

            // act
            var updateResponse = await UpdateProductAsync(productId, newName, newQuantityInPackage, newUnitOfMeasurement, categoryId);

            // assert
            Assert.Equal(HttpStatusCode.OK, updateResponse.StatusCode);
            var updatedBody = await updateResponse.Content.ReadFromJsonAsync<JsonObject>();
            Assert.Equal(productId, updatedBody["id"].AsValue().GetValue<int>());
            Assert.Equal(newName, updatedBody["name"].AsValue().GetValue<string>());
            Assert.Equal(newQuantityInPackage, updatedBody["quantityInPackage"].AsValue().GetValue<int>());
            Assert.Equal(newUnitOfMeasurement, updatedBody["unitOfMeasurement"].AsValue().GetValue<string>());
        }

        [Fact]
        public async Task TC014_Update_Product_That_Does_Not_Exist_Returns_NotFound()
        {
            // arrange
            int nonExistentId = 9999; // Assuming 9999 is a non-existent product ID
            int categoryId = 1;
            string newName = "New Product";
            int newQuantityInPackage = 10;
            string newUnitOfMeasurement = "Gram";

            // act
            var updateResponse = await UpdateProductAsync(nonExistentId, newName, newQuantityInPackage, newUnitOfMeasurement, categoryId);

            // assert
            Assert.Equal(HttpStatusCode.NotFound, updateResponse.StatusCode);
        }

        [Fact]
        public async Task TC015_Delete_Product_Returns_OK()
        {
            // arrange
            var createResponse = await CreateProductAsync("New Product", 10, "Gram", await CreateCategoryAndGetIdAsync("New Category"));
            var body = await createResponse.Content.ReadFromJsonAsync<JsonObject>();
            int productId = body["id"].AsValue().GetValue<int>();

            // act
            var deleteResponse = await DeleteProductAsync(productId);

            // assert
            Assert.Equal(HttpStatusCode.OK, deleteResponse.StatusCode);
            var deleteBody = await deleteResponse.Content.ReadFromJsonAsync<JsonObject>();
            Assert.Equal(productId, deleteBody["id"].AsValue().GetValue<int>());
        }

        [Fact]
        public async Task TC016_Delete_Product_That_Does_Not_Exist_Returns_NotFound()
        {
            // arrange
            int nonExistentId = 9999; // Assuming 9999 is a non-existent product ID

            // act
            var deleteResponse = await DeleteProductAsync(nonExistentId);

            // assert
            Assert.Equal(HttpStatusCode.NotFound, deleteResponse.StatusCode);
        }

        private async Task<int> CreateCategoryAndGetIdAsync(string categoryName)
        {
            var categoryResponse = await CreateCategoryAsync(categoryName);
            var categoryBody = await categoryResponse.Content.ReadFromJsonAsync<JsonObject>();
            return categoryBody["id"].AsValue().GetValue<int>();
        }
    }
}
```