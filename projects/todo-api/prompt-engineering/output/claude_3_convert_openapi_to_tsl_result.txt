```yaml
test_cases:
  - id: TC001
    group: User
    name: Create User When Valid Data Returns OK
    description: Criação de usuário com dados válidos.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "V@lid123"
    expected_response:
      status_code: 200

  - id: TC002
    group: User 
    name: Create User When Username Already Exists Returns BadRequest
    description: Tentativa de criar usuário com username que já existe.
    endpoint: /users
    method: POST
    preconditions:
      - "Usuário com username 'existing_user' já existe"
    request_body:
      username: "existing_user"
      password: "V@lid123"
    expected_response:
      status_code: 400

  - id: TC003
    group: User
    name: Create User When Username Is Null Returns BadRequest
    description: Tentativa de criar usuário com username nulo.
    endpoint: /users
    method: POST
    request_body:
      username: null
      password: "V@lid123"
    expected_response:
      status_code: 400

  - id: TC004
    group: User
    name: Create User When Username Is Empty Returns BadRequest
    description: Tentativa de criar usuário com username vazio.
    endpoint: /users
    method: POST
    request_body:
      username: ""
      password: "V@lid123"
    expected_response:
      status_code: 400

  - id: TC005
    group: User
    name: Create User When Username Too Long Returns BadRequest
    description: Tentativa de criar usuário com username maior que 128 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      password: "V@lid123"
    expected_response:
      status_code: 400

  - id: TC006
    group: User
    name: Create User When Username Has Invalid Characters Returns BadRequest
    description: Tentativa de criar usuário com caracteres inválidos no username.
    endpoint: /users
    method: POST
    request_body:
      username: "invalid*username"
      password: "V@lid123"
    expected_response:
      status_code: 400

  - id: TC007
    group: User
    name: Create User When Password Is Null Returns BadRequest
    description: Tentativa de criar usuário com senha nula.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: null
    expected_response:
      status_code: 400

  - id: TC008
    group: User
    name: Create User When Password Is Empty Returns BadRequest
    description: Tentativa de criar usuário com senha vazia.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: ""
    expected_response:
      status_code: 400

  - id: TC009
    group: User
    name: Create User When Password Too Short Returns BadRequest
    description: Tentativa de criar usuário com senha menor que 6 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "V@l1"
    expected_response:
      status_code: 400

  - id: TC010
    group: User
    name: Create User When Password Too Long Returns BadRequest
    description: Tentativa de criar usuário com senha maior que 32 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "V@lid123456789012345678901234567890123"
    expected_response:
      status_code: 400

  - id: TC011
    group: User
    name: Create User When Password Missing Uppercase Returns BadRequest
    description: Tentativa de criar usuário com senha sem letra maiúscula.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "v@lid123"
    expected_response:
      status_code: 400

  - id: TC012
    group: User
    name: Create User When Password Missing Lowercase Returns BadRequest
    description: Tentativa de criar usuário com senha sem letra minúscula.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "V@LID123"
    expected_response:
      status_code: 400

  - id: TC013
    group: User
    name: Create User When Password Missing Number Returns BadRequest
    description: Tentativa de criar usuário com senha sem número.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "V@lidpass"
    expected_response:
      status_code: 400

  - id: TC014
    group: User
    name: Create User When Password Missing Special Character Returns BadRequest
    description: Tentativa de criar usuário com senha sem caractere especial.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "Valid123"
    expected_response:
      status_code: 400

  - id: TC015
    group: User
    name: Generate Token When Valid Credentials Returns OK
    description: Geração de token com credenciais válidas.
    endpoint: /users/token
    method: POST
    preconditions:
      - "Usuário com username 'valid_user' e senha 'V@lid123' existe"
    request_body:
      username: "valid_user"
      password: "V@lid123"
    expected_response:
      status_code: 200
      body:
        token: is string not empty

  - id: TC016
    group: User
    name: Generate Token When Invalid Username Returns BadRequest
    description: Tentativa de gerar token com username inválido.
    endpoint: /users/token
    method: POST
    request_body:
      username: "invalid_user"
      password: "V@lid123"
    expected_response:
      status_code: 400

  - id: TC017
    group: User
    name: Generate Token When Invalid Password Returns BadRequest
    description: Tentativa de gerar token com senha inválida.
    endpoint: /users/token
    method: POST
    preconditions:
      - "Usuário com username 'valid_user' e senha 'V@lid123' existe"
    request_body:
      username: "valid_user"
      password: "Wr@ng123"
    expected_response:
      status_code: 400

  - id: TC018
    group: Todo
    name: Create Todo When Valid Data Returns Created
    description: Criação de todo com dados válidos.
    endpoint: /todos
    method: POST
    preconditions:
      - "Existe token válido"
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Valid todo title"
    expected_response:
      status_code: 201
      body:
        id: is integer greater than 0
        title: "Valid todo title"
        isComplete: false

  - id: TC019
    group: Todo
    name: Create Todo When Title Is Null Returns BadRequest
    description: Tentativa de criar todo com título nulo.
    endpoint: /todos
    method: POST
    preconditions:
      - "Existe token válido"
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: null
    expected_response:
      status_code: 400

  - id: TC020
    group: Todo
    name: Create Todo When Title Is Empty Returns BadRequest
    description: Tentativa de criar todo com título vazio.
    endpoint: /todos
    method: POST
    preconditions:
      - "Existe token válido"
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: ""
    expected_response:
      status_code: 400

  - id: TC021
    group: Todo
    name: Create Todo When Title Too Long Returns BadRequest
    description: Tentativa de criar todo com título maior que 256 caracteres.
    endpoint: /todos
    method: POST
    preconditions:
      - "Existe token válido"
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    expected_response:
      status_code: 400

  - id: TC022
    group: Todo
    name: Create Todo When Invalid Token Returns Unauthorized
    description: Tentativa de criar todo com token inválido.
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer invalid_token"
    request_body:
      title: "Valid todo title"
    expected_response:
      status_code: 401

  - id: TC023
    group: Todo
    name: List Todos When User Has Todos Returns OK
    description: Listagem de todos quando usuário possui todos.
    endpoint: /todos
    method: GET
    preconditions:
      - "Existe token válido"
      - "Usuário possui todos cadastrados"
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
      body: is array not empty

  - id: TC024
    group: Todo
    name: List Todos When User Has No Todos Returns Empty Array
    description: Listagem de todos quando usuário não possui todos.
    endpoint: /todos
    method: GET
    preconditions:
      - "Existe token válido"
      - "Usuário não possui todos cadastrados"
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
      body: is empty array

  - id: TC025
    group: Todo
    name: List Todos When Invalid Token Returns Unauthorized
    description: Tentativa de listar todos com token inválido.
    endpoint: /todos
    method: GET
    headers:
      Authorization: "Bearer invalid_token"
    expected_response:
      status_code: 401

  - id: TC026
    group: Todo
    name: Get Todo When Valid ID Returns OK
    description: Consulta de todo por ID válido.
    endpoint: /todos/{id}
    method: GET
    preconditions:
      - "Existe token válido"
      - "Existe todo cadastrado com ID {id}"
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
      body:
        id: {id}
        title: is string not empty
        isComplete: is boolean

  - id: TC027
    group: Todo
    name: Get Todo When Invalid ID Returns NotFound
    description: Tentativa de consultar todo com ID inválido.
    endpoint: /todos/999
    method: GET
    preconditions:
      - "Existe token válido"
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 404

  - id: TC028
    group: Todo
    name: Get Todo When Other User Todo Returns NotFound
    description: Tentativa de consultar todo de outro usuário.
    endpoint: /todos/{id}
    method: GET
    preconditions:
      - "Existe token válido do usuário A"
      - "Existe todo cadastrado com ID {id} pelo usuário B"
    headers:
      Authorization: "Bearer {valid_token_user_a}"
    expected_response:
      status_code: 404

  - id: TC029
    group: Todo
    name: Update Todo When Valid Data Returns OK
    description: Atualização de todo com dados válidos.
    endpoint: /todos/{id}
    method: PUT
    preconditions:
      - "Existe token válido"
      - "Existe todo cadastrado com ID {id}"
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Updated todo title"
      isComplete: true
    expected_response:
      status_code: 200
      body:
        id: {id}
        title: "Updated todo title"
        isComplete: true

  - id: TC030
    group: Todo
    name: Update Todo When Title Is Null Returns BadRequest
    description: Tentativa de atualizar todo com título nulo.
    endpoint: /todos/{id}
    method: PUT
    preconditions:
      - "Existe token válido"
      - "Existe todo cadastrado com ID {id}"
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: null
      isComplete: true
    expected_response:
      status_code: 400

  - id: TC031
    group: Todo
    name: Update Todo When IsComplete Is Null Returns BadRequest
    description: Tentativa de atualizar todo com isComplete nulo.
    endpoint: /todos/{id}
    method: PUT
    preconditions:
      - "Existe token válido"
      - "Existe todo cadastrado com ID {id}"
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Valid todo title"
      isComplete: null
    expected_response:
      status_code: 400

  - id: TC032
    group: Todo
    name: Update Todo When Title Too Long Returns BadRequest
    description: Tentativa de atualizar todo com título maior que 256 caracteres.
    endpoint: /todos/{id}
    method: PUT
    preconditions:
      - "Existe token válido"
      - "Existe todo cadastrado com ID {id}"
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      isComplete: true
    expected_response:
      status_code: 400

  - id: TC033
    group: Todo
    name: Update Todo When Invalid ID Returns NotFound
    description: Tentativa de atualizar todo com ID inválido.
    endpoint: /todos/999
    method: PUT
    preconditions:
      - "Existe token válido"
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Valid todo title"
      isComplete: true
    expected_response:
      status_code: 404

  - id: TC034
    group: Todo
    name: Update Todo When Other User Todo Returns NotFound
    description: Tentativa de atualizar todo de outro usuário.
    endpoint: /todos/{id}
    method: PUT
    preconditions:
      - "Existe token válido do usuário A"
      - "Existe todo cadastrado com ID {id} pelo usuário B"
    headers:
      Authorization: "Bearer {valid_token_user_a}"
    request_body:
      title: "Valid todo title"
      isComplete: true
    expected_response:
      status_code: 404

  - id: TC035
    group: Todo
    name: Delete Todo When Valid ID Returns OK
    description: Exclusão de todo com ID válido.
    endpoint: /todos/{id}
    method: DELETE
    preconditions:
      - "Existe token válido"
      - "Existe todo cadastrado com ID {id}"
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200

  - id: TC036
    group: Todo
    name: Delete Todo When Invalid ID Returns NotFound
    description: Tentativa de excluir todo com ID inválido.
    endpoint: /todos/999
    method: DELETE
    preconditions:
      - "Existe token válido"
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 404

  - id: TC037
    group: Todo
    name: Delete Todo When Other User Todo Returns NotFound
    description: Tentativa de excluir todo de outro usuário.
    endpoint: /todos/{id}
    method: DELETE
    preconditions:
      - "Existe token válido do usuário A"
      - "Existe todo cadastrado com ID {id} pelo usuário B"
    headers:
      Authorization: "Bearer {valid_token_user_a}"
    expected_response:
      status_code: 404
```