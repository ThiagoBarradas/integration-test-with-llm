<think>
Okay, the user provided several test cases in TSL that need to be converted into C# integration tests using xUnit. I'll start by analyzing the TSL and identify each test case's parameters, such as the endpoint, HTTP method, request body, expected status codes, and any preconditions.

First, I'll check the existing code examples to understand the structure. The previous examples grouped tests into separate files by functionality (Users, People, App). The new TSL test cases (TC043 to TC050) need similar treatment.

For TC043 to TC050, I need to map each TSL test scenario into a corresponding xUnit test method. I'll ensure that each test method has appropriate Arrange, Act, Assert sections. I must handle preconditions, proper HTTP requests, and assertions based on expected responses.

Looking at TC043: it's a People test where creating a person with extra properties should return 400. I need to create a test in PeopleIntegrationTests.cs. The method will send a POST request with an additional property and check for BadRequest.

TC044 and TC045 are User tests where creating a user without nickname or password should return 400. These will go into UsersIntegrationTests.cs. The request bodies will miss those fields, and the test checks for BadRequest.

TC046 and TC047 are People tests missing name or age. I'll add methods to PeopleIntegrationTests.cs where the request body omits these required fields and assert BadRequest.

TC048 tests authentication with invalid Content-Type. In the Users tests, I need a test that sends a POST to /users/token with text/plain content and expects a 400.

TC049 and TC050 are App tests for updating the logo with an empty file or multiple files, expecting 415. In AppIntegrationTests.cs, these involve sending multipart form data with empty content or multiple files and checking UnsupportedMediaType.

I must ensure each test uses the correct HTTP client methods, headers, and content types. For form data in App tests, construct MultipartFormDataContent appropriately. Also, handle preconditions by creating necessary users or tokens before the test runs.

For each new test case, I'll use the existing helper methods (like CreateUserAsync, CreateTokenAsync) or create new ones if needed. Ensure that variables are named clearly, and assertions check the correct status codes and response bodies.

Finally, ensure all tests are placed in the correct files (Users, People, App) and that the methods are marked as [Fact] with proper async/await usage.
</think>

OK