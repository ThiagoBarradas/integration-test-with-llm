```yml
test_cases:
  - id: TC001
    group: Users
    name: Create User When Valid Data Returns OK
    description: Criação de um usuário com dados válidos.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username"
      password: "P@ssw0rd"
    expected_response:
      status_code: 200
  - id: TC002
    group: Users
    name: Create User When Username Already Exists Returns BadRequest
    description: Tentativa de criar um usuário com um username que já existe.
    endpoint: /users
    method: POST
    preconditions:
      - "Usuário com username 'my_username' já existe no sistema."
    request_body:
      username: "my_username"
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC003
    group: Users
    name: Create User When Invalid Username Format Returns BadRequest
    description: Criação de usuário com username inválido (contém caracteres especiais).
    endpoint: /users
    method: POST
    request_body:
      username: "invalid!Username"
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC004
    group: Users
    name: Create User When Username Is Null Returns BadRequest
    description: Criação de usuário com username nulo.
    endpoint: /users
    method: POST
    request_body:
      username: null
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC005
    group: Users
    name: Create User When Username Is Empty String Returns BadRequest
    description: Criação de usuário com username vazio.
    endpoint: /users
    method: POST
    request_body:
      username: ""
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC006
    group: Users
    name: Create User When Username Too Short Returns BadRequest
    description: Criação de usuário com username curto - 1 caractere.
    endpoint: /users
    method: POST
    request_body:
      username: "1"
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC007
    group: Users
    name: Create User When Username Too Long Returns BadRequest
    description: Criação de usuário com username longo - 129 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username_abcdefghijklmnopqrstuvwxyz"
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC008
    group: Users
    name: Create User When Username Has Minimum Size Returns OK
    description: Criação de usuário com username com menor tamanho possível - 1 caractere.
    endpoint: /users
    method: POST
    request_body:
      username: "1"
      password: "P@ssw0rd"
    expected_response:
      status_code: 200
  - id: TC009
    group: Users
    name: Create User When Username Has Maximum Size Returns OK
    description: Criação de usuário com username com maior tamanho possível - 128 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username_abcdefghijklmnopqrstuvwxyz01234567"
      password: "P@ssw0rd"
    expected_response:
      status_code: 200
  - id: TC010
    group: Users
    name: Create User When Password Is Null Returns BadRequest
    description: Criação de usuário com senha nula.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username"
      password: null
    expected_response:
      status_code: 400
  - id: TC011
    group: Users
    name: Create User When Password Is Empty String Returns BadRequest
    description: Criação de usuário com senha vazia.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username"
      password: ""
    expected_response:
      status_code: 400
  - id: TC012
    group: Users
    name: Create User When Password Too Short Returns BadRequest
    description: Criação de usuário com senha curta - 5 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username"
      password: "P@ssw"
    expected_response:
      status_code: 400
  - id: TC013
    group: Users
    name: Create User When Password Too Long Returns BadRequest
    description: Criação de usuário com senha longa - 33 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username"
      password: "P@ssw0rdP@ssw0rdP@ssw0rdP@ssw0rdP@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC014
    group: Users
    name: Create User When Password Has Minimum Size Returns OK
    description: Criação de usuário com senha com menor tamanho possível - 6 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username"
      password: "P@ssw0"
    expected_response:
      status_code: 200
  - id: TC015
    group: Users
    name: Create User When Password Has Maximum Size Returns OK
    description: Criação de usuário com senha com maior tamanho possível - 32 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username"
      password: "P@ssw0rdP@ssw0rdP@ssw0rdP@ssw0rdP@ssw0rA"
    expected_response:
      status_code: 200
  - id: TC016
    group: Users
    name: Create User When Password Missing Uppercase Letter Returns BadRequest
    description: Criação de usuário com senha sem letra maiúscula.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username"
      password: "p@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC017
    group: Users
    name: Create User When Password Missing Lowercase Letter Returns BadRequest
    description: Criação de usuário com senha sem letra minúscula.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username"
      password: "P@SSW0RD"
    expected_response:
      status_code: 400
  - id: TC018
    group: Users
    name: Create User When Password Missing Digit Returns BadRequest
    description: Criação de usuário com senha sem dígito.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username"
      password: "P@sswod"
    expected_response:
      status_code: 400
  - id: TC019
    group: Users
    name: Create User When Password Missing Non-Alphanumeric Character Returns BadRequest
    description: Criação de usuário com senha sem caractere não-alfanumérico.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username"
      password: "Pssw0rd"
    expected_response:
      status_code: 400
  - id: TC020
    group: Users
    name: Authenticate User When Valid Data Returns OK
    description: Autenticação de usuário com credenciais válidas.
    endpoint: /users/token
    method: POST
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
    request_body:
      username: "my_username"
      password: "P@ssw0rd"
    expected_response:
      status_code: 200
      body:
        token: is string not empty
  - id: TC021
    group: Users
    name: Authenticate User When Invalid Password Returns BadRequest
    description: Autenticação de usuário com senha inválida.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
    endpoint: /users/token
    method: POST
    request_body:
      username: "my_username"
      password: "invalid_password"
    expected_response:
      status_code: 400
  - id: TC022
    group: Users
    name: Authenticate User When Invalid Username Returns BadRequest
    description: Autenticação de usuário com usuário inválido.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
    endpoint: /users/token
    method: POST
    request_body:
      username: "invalid_username"
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC023
    group: Todos
    name: Create Todo When Valid Data Returns Created
    description: Criação de uma todo com dados válidos.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Something todo in the future"
    expected_response:
      status_code: 201
      body:
        id: is integer greater than 0
        title: "Something todo in the future"
        isComplete: false
  - id: TC024
    group: Todos
    name: Create Todo When Title Is Null Returns BadRequest
    description: Criação de uma todo com título nulo.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: null
    expected_response:
      status_code: 400
  - id: TC025
    group: Todos
    name: Create Todo When Title Is Empty String Returns BadRequest
    description: Criação de uma todo com título vazio.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: ""
    expected_response:
      status_code: 400
  - id: TC026
    group: Todos
    name: Create Todo When Title Too Short Returns BadRequest
    description: Criação de uma todo com título curto - 1 caractere.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "a"
    expected_response:
      status_code: 400
  - id: TC027
    group: Todos
    name: Create Todo When Title Too Long Returns BadRequest
    description: Criação de uma todo com título longo - 257 caracteres.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
    expected_response:
      status_code: 400
  - id: TC028
    group: Todos
    name: Create Todo When Title Has Minimum Size Returns Created
    description: Criação de uma todo com título com menor tamanho possível - 1 caractere.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "a"
    expected_response:
      status_code: 201
      body:
        id: is integer greater than 0
        title: "a"
        isComplete: false
  - id: TC029
    group: Todos
    name: Create Todo When Title Has Maximum Size Returns Created
    description: Criação de uma todo com título com maior tamanho possível - 256 caracteres.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
    expected_response:
      status_code: 201
      body:
        id: is integer greater than 0
        title: "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
        isComplete: false
  - id: TC030
    group: Todos
    name: Get Todos List When Valid Token Returns OK
    description: Obter a lista de todos do usuário.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
    endpoint: /todos
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
      body:
        items[]: is array and length > 0
  - id: TC031
    group: Todos
    name: Get Todos List When Invalid Token Returns Unauthorized
    description: Obter a lista de todos com token inválido.
    endpoint: /todos
    method: GET
    headers:
      Authorization: "Bearer invalid_token"
    expected_response:
      status_code: 401
  - id: TC032
    group: Todos
    name: Get Todos List When Without Token Returns Unauthorized
    description: Obter a lista de todos sem token.
    endpoint: /todos
    method: GET
    expected_response:
      status_code: 401
  - id: TC033
    group: Todos
    name: Get Todo When Exists And Valid Token Returns OK
    description: Obter uma todo existente pelo ID do usuário.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
      - "Existe uma todo criada com título 'Something todo in the future' e ID armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
      body:
        id: is integer greater than 0
        title: "Something todo in the future"
        isComplete: false
  - id: TC034
    group: Todos
    name: Get Todo When Not Exists Returns NotFound
    description: Obter uma todo inexistente pelo ID do usuário.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
    endpoint: /todos/9999999
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 404
  - id: TC035
    group: Todos
    name: Get Todo When Invalid Token Returns Unauthorized
    description: Obter uma todo com token inválido.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe uma todo criada com título 'Something todo in the future' e ID armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: GET
    headers:
      Authorization: "Bearer invalid_token"
    expected_response:
      status_code: 401
  - id: TC036
    group: Todos
    name: Get Todo When Without Token Returns Unauthorized
    description: Obter uma todo sem token.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe uma todo criada com título 'Something todo in the future' e ID armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: GET
    expected_response:
      status_code: 401
  - id: TC037
    group: Todos
    name: Update Todo When Exists And Valid Token Returns OK
    description: Atualizar uma todo existente pelo ID do usuário.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
      - "Existe uma todo criada com título 'Something todo in the future' e ID armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Something todo in the future updated"
      isComplete: true
    expected_response:
      status_code: 200
      body:
        id: is integer greater than 0
        title: "Something todo in the future updated"
        isComplete: true
  - id: TC038
    group: Todos
    name: Update Todo When Not Exists Returns NotFound
    description: Atualizar uma todo inexistente pelo ID do usuário.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
    endpoint: /todos/9999999
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Something todo in the future updated"
      isComplete: true
    expected_response:
      status_code: 404
  - id: TC039
    group: Todos
    name: Update Todo When Invalid Token Returns Unauthorized
    description: Atualizar uma todo com token inválido.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe uma todo criada com título 'Something todo in the future' e ID armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer invalid_token"
    request_body:
      title: "Something todo in the future updated"
      isComplete: true
    expected_response:
      status_code: 401
  - id: TC040
    group: Todos
    name: Update Todo When Without Token Returns Unauthorized
    description: Atualizar uma todo sem token.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe uma todo criada com título 'Something todo in the future' e ID armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    request_body:
      title: "Something todo in the future updated"
      isComplete: true
    expected_response:
      status_code: 401
  - id: TC041
    group: Todos
    name: Delete Todo When Exists And Valid Token Returns OK
    description: Excluir uma todo existente pelo ID do usuário.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
      - "Existe uma todo criada com título 'Something todo in the future' e ID armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: DELETE
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
  - id: TC042
    group: Todos
    name: Delete Todo When Not Exists Returns NotFound
    description: Excluir uma todo inexistente pelo ID do usuário.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'my_username'"
    endpoint: /todos/9999999
    method: DELETE
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 404
  - id: TC043
    group: Todos
    name: Delete Todo When Invalid Token Returns Unauthorized
    description: Excluir uma todo com token inválido.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe uma todo criada com título 'Something todo in the future' e ID armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: DELETE
    headers:
      Authorization: "Bearer invalid_token"
    expected_response:
      status_code: 401
  - id: TC044
    group: Todos
    name: Delete Todo When Without Token Returns Unauthorized
    description: Excluir uma todo sem token.
    preconditions:
      - "Usuário com username 'my_username' e senha 'P@ssw0rd' existe."
      - "Existe uma todo criada com título 'Something todo in the future' e ID armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: DELETE
    expected_response:
      status_code: 401