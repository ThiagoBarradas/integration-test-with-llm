```yaml
test_cases:
  - id: TC001
    group: Users
    name: Create_User_When_Valid_Data_Returns_OK
    description: Criação de um usuário com dados válidos.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "P@ssw0rd"
    expected_response:
      status_code: 200
  - id: TC002
    group: Users
    name: Create_User_When_Username_Already_Exists_Returns_BadRequest
    description: Tentativa de criar um usuário com um username que já existe.
    endpoint: /users
    method: POST
    preconditions:
      - "Usuário com username 'existing_username' já existe no sistema."
    request_body:
      username: "existing_username"
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC003
    group: Users
    name: Create_User_When_Username_Is_Null_Returns_BadRequest
    description: Criação de usuário com username nulo.
    endpoint: /users
    method: POST
    request_body:
      username: null
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC004
    group: Users
    name: Create_User_When_Username_Is_Empty_String_Returns_BadRequest
    description: Criação de usuário com username vazio.
    endpoint: /users
    method: POST
    request_body:
      username: ""
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC005
    group: Users
    name: Create_User_When_Username_Too_Short_Returns_BadRequest
    description: Criação de usuário com username curto - 0 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: ""
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC006
    group: Users
    name: Create_User_When_Username_Too_Long_Returns_BadRequest
    description: Criação de usuário com username longo - 129 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "a".repeat(129)
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC007
    group: Users
    name: Create_User_When_Username_Has_Minimum_Size_Returns_OK
    description: Criação de usuário com username com menor tamanho possível - 1 caractere.
    endpoint: /users
    method: POST
    request_body:
      username: "a"
      password: "P@ssw0rd"
    expected_response:
      status_code: 200
  - id: TC008
    group: Users
    name: Create_User_When_Username_Has_Maximum_Size_Returns_OK
    description: Criação de usuário com username com maior tamanho possível - 128 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "a".repeat(128)
      password: "P@ssw0rd"
    expected_response:
      status_code: 200
  - id: TC009
    group: Users
    name: Create_User_When_Username_Contains_Invalid_Characters_Returns_BadRequest
    description: Criação de usuário com username contendo caracteres inválidos.
    endpoint: /users
    method: POST
    request_body:
      username: "invalid*username"
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC010
    group: Users
    name: Create_User_When_Password_Is_Null_Returns_BadRequest
    description: Criação de usuário com senha nula.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: null
    expected_response:
      status_code: 400
  - id: TC011
    group: Users
    name: Create_User_When_Password_Is_Empty_String_Returns_BadRequest
    description: Criação de usuário com senha vazia.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: ""
    expected_response:
      status_code: 400
  - id: TC012
    group: Users
    name: Create_User_When_Password_Too_Short_Returns_BadRequest
    description: Criação de usuário com senha curta - 5 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "Pass"
    expected_response:
      status_code: 400
  - id: TC013
    group: Users
    name: Create_User_When_Password_Too_Long_Returns_BadRequest
    description: Criação de usuário com senha longa - 33 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "P@ssw0rd123456789012345678901234567890"
    expected_response:
      status_code: 400
  - id: TC014
    group: Users
    name: Create_User_When_Password_Has_Minimum_Size_Returns_OK
    description: Criação de usuário com senha com menor tamanho possível - 6 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "P@ssw"
    expected_response:
      status_code: 200
  - id: TC015
    group: Users
    name: Create_User_When_Password_Has_Maximum_Size_Returns_OK
    description: Criação de usuário com senha com maior tamanho possível - 32 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "P@ssw0rd123456789012345678901234567890"
    expected_response:
      status_code: 200
  - id: TC016
    group: Users
    name: Create_User_When_Password_Missing_Uppercase_Letter_Returns_BadRequest
    description: Criação de usuário com senha sem letra maiúscula.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "passw0rd"
    expected_response:
      status_code: 400
  - id: TC017
    group: Users
    name: Create_User_When_Password_Missing_Lowercase_Letter_Returns_BadRequest
    description: Criação de usuário com senha sem letra minúscula.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "PASSW0RD"
    expected_response:
      status_code: 400
  - id: TC018
    group: Users
    name: Create_User_When_Password_Missing_Digit_Returns_BadRequest
    description: Criação de usuário com senha sem dígito.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "Passw0rd"
    expected_response:
      status_code: 400
  - id: TC019
    group: Users
    name: Create_User_When_Password_Missing_Special_Character_Returns_BadRequest
    description: Criação de usuário com senha sem caractere especial.
    endpoint: /users
    method: POST
    request_body:
      username: "valid_username"
      password: "Password1"
    expected_response:
      status_code: 400
  - id: TC020
    group: Users
    name: Authenticate_User_When_Valid_Credentials_Returns_OK
    description: Autenticação de usuário com credenciais válidas.
    endpoint: /users/token
    method: POST
    preconditions:
      - "Usuário com username 'valid_username' e senha 'P@ssw0rd' existe."
    request_body:
      username: "valid_username"
      password: "P@ssw0rd"
    expected_response:
      status_code: 200
      body:
        token: is string not empty
  - id: TC021
    group: Users
    name: Authenticate_User_When_Invalid_Password_Returns_BadRequest
    description: Autenticação de usuário com senha inválida.
    endpoint: /users/token
    method: POST
    preconditions:
      - "Usuário com username 'valid_username' e senha 'P@ssw0rd' existe."
    request_body:
      username: "valid_username"
      password: "WrongPassword"
    expected_response:
      status_code: 400
  - id: TC022
    group: Users
    name: Authenticate_User_When_Invalid_Username_Returns_BadRequest
    description: Autenticação de usuário com username inválido.
    endpoint: /users/token
    method: POST
    request_body:
      username: "invalid_username"
      password: "P@ssw0rd"
    expected_response:
      status_code: 400
  - id: TC023
    group: Todos
    name: List_Todos_When_Valid_Data_Returns_OK
    description: Listagem de todos os todos existentes do usuário.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
    endpoint: /todos
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
      body:
        is array
  - id: TC024
    group: Todos
    name: List_Todos_When_User_Has_No_Todos_Returns_OK
    description: Listagem de todos os todos do usuário quando não existem todos.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
    endpoint: /todos
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
      body:
        is empty array
  - id: TC025
    group: Todos
    name: List_Todos_When_Invalid_Token_Returns_Unauthorized
    description: Listagem de todos os todos do usuário com token inválido.
    endpoint: /todos
    method: GET
    headers:
      Authorization: "Bearer invalid_token"
    expected_response:
      status_code: 401
  - id: TC026
    group: Todos
    name: List_Todos_When_Missing_Token_Returns_Unauthorized
    description: Listagem de todos os todos do usuário sem token.
    endpoint: /todos
    method: GET
    expected_response:
      status_code: 401
  - id: TC027
    group: Todos
    name: Create_Todo_When_Valid_Data_Returns_Created
    description: Criação de um todo com dados válidos.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Algo para fazer no futuro"
    expected_response:
      status_code: 201
      body:
        title: "Algo para fazer no futuro"
        isComplete: false
  - id: TC028
    group: Todos
    name: Create_Todo_When_Title_Is_Null_Returns_BadRequest
    description: Criação de um todo com title nulo.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: null
    expected_response:
      status_code: 400
  - id: TC029
    group: Todos
    name: Create_Todo_When_Title_Is_Empty_String_Returns_BadRequest
    description: Criação de um todo com title vazio.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: ""
    expected_response:
      status_code: 400
  - id: TC030
    group: Todos
    name: Create_Todo_When_Title_Too_Long_Returns_BadRequest
    description: Criação de um todo com title longo - 257 caracteres.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "a".repeat(257)
    expected_response:
      status_code: 400
  - id: TC031
    group: Todos
    name: Create_Todo_When_Title_Has_Minimum_Size_Returns_Created
    description: Criação de um todo com title com menor tamanho possível - 1 caractere.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "a"
    expected_response:
      status_code: 201
      body:
        title: "a"
        isComplete: false
  - id: TC032
    group: Todos
    name: Create_Todo_When_Title_Has_Maximum_Size_Returns_Created
    description: Criação de um todo com title com maior tamanho possível - 256 caracteres.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "a".repeat(256)
    expected_response:
      status_code: 201
      body:
        title: "a".repeat(256)
        isComplete: false
  - id: TC033
    group: Todos
    name: Create_Todo_When_Invalid_Token_Returns_Unauthorized
    description: Criação de um todo com token inválido.
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer invalid_token"
    request_body:
      title: "Algo para fazer no futuro"
    expected_response:
      status_code: 401
  - id: TC034
    group: Todos
    name: Create_Todo_When_Missing_Token_Returns_Unauthorized
    description: Criação de um todo sem token.
    endpoint: /todos
    method: POST
    request_body:
      title: "Algo para fazer no futuro"
    expected_response:
      status_code: 401
  - id: TC035
    group: Todos
    name: Get_Todo_When_Valid_Data_Returns_OK
    description: Consulta de um todo existente pelo ID.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
      - "Existe um todo criado pelo usuário com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
      body:
        title: "Algo para fazer no futuro"
        isComplete: false
  - id: TC036
    group: Todos
    name: Get_Todo_When_ID_Not_Exists_Returns_NotFound
    description: Consulta de um todo com ID que não existe.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
    endpoint: /todos/9999999
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 404
  - id: TC037
    group: Todos
    name: Get_Todo_When_Invalid_Token_Returns_Unauthorized
    description: Consulta de um todo com token inválido.
    endpoint: /todos/1
    method: GET
    headers:
      Authorization: "Bearer invalid_token"
    expected_response:
      status_code: 401
  - id: TC038
    group: Todos
    name: Get_Todo_When_Missing_Token_Returns_Unauthorized
    description: Consulta de um todo sem token.
    endpoint: /todos/1
    method: GET
    expected_response:
      status_code: 401
  - id: TC039
    group: Todos
    name: Get_Todo_When_Todo_Does_Not_Belong_To_User_Returns_NotFound
    description: Consulta de um todo que não pertence ao usuário.
    preconditions:
      - "Usuário com token de autenticação {valid_token_1} válido."
      - "Existe um todo criado pelo usuário com token {valid_token_1} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
      - "Usuário com token de autenticação {valid_token_2} válido."
    endpoint: /todos/{todo_id}
    method: GET
    headers:
      Authorization: "Bearer {valid_token_2}"
    expected_response:
      status_code: 404
  - id: TC040
    group: Todos
    name: Update_Todo_When_Valid_Data_Returns_OK
    description: Atualização de um todo com dados válidos.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
      - "Existe um todo criado pelo usuário com token {valid_token} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Algo atualizado para fazer no futuro"
      isComplete: true
    expected_response:
      status_code: 200
      body:
        title: "Algo atualizado para fazer no futuro"
        isComplete: true
  - id: TC041
    group: Todos
    name: Update_Todo_When_Title_Is_Null_Returns_BadRequest
    description: Atualização de um todo com title nulo.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
      - "Existe um todo criado pelo usuário com token {valid_token} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: null
      isComplete: true
    expected_response:
      status_code: 400
  - id: TC042
    group: Todos
    name: Update_Todo_When_Title_Is_Empty_String_Returns_BadRequest
    description: Atualização de um todo com title vazio.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
      - "Existe um todo criado pelo usuário com token {valid_token} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: ""
      isComplete: true
    expected_response:
      status_code: 400
  - id: TC043
    group: Todos
    name: Update_Todo_When_Title_Too_Long_Returns_BadRequest
    description: Atualização de um todo com title longo - 257 caracteres.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
      - "Existe um todo criado pelo usuário com token {valid_token} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "a".repeat(257)
      isComplete: true
    expected_response:
      status_code: 400
  - id: TC044
    group: Todos
    name: Update_Todo_When_Title_Has_Minimum_Size_Returns_OK
    description: Atualização de um todo com title com menor tamanho possível - 1 caractere.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
      - "Existe um todo criado pelo usuário com token {valid_token} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "a"
      isComplete: true
    expected_response:
      status_code: 200
      body:
        title: "a"
        isComplete: true
  - id: TC045
    group: Todos
    name: Update_Todo_When_Title_Has_Maximum_Size_Returns_OK
    description: Atualização de um todo com title com maior tamanho possível - 256 caracteres.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
      - "Existe um todo criado pelo usuário com token {valid_token} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "a".repeat(256)
      isComplete: true
    expected_response:
      status_code: 200
      body:
        title: "a".repeat(256)
        isComplete: true
  - id: TC046
    group: Todos
    name: Update_Todo_When_Invalid_Token_Returns_Unauthorized
    description: Atualização de um todo com token inválido.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
      - "Existe um todo criado pelo usuário com token {valid_token} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer invalid_token"
    request_body:
      title: "Algo atualizado para fazer no futuro"
      isComplete: true
    expected_response:
      status_code: 401
  - id: TC047
    group: Todos
    name: Update_Todo_When_Missing_Token_Returns_Unauthorized
    description: Atualização de um todo sem token.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
      - "Existe um todo criado pelo usuário com token {valid_token} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    request_body:
      title: "Algo atualizado para fazer no futuro"
      isComplete: true
    expected_response:
      status_code: 401
  - id: TC048
    group: Todos
    name: Update_Todo_When_ID_Not_Exists_Returns_NotFound
    description: Atualização de um todo com ID que não existe.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
    endpoint: /todos/9999999
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Algo atualizado para fazer no futuro"
      isComplete: true
    expected_response:
      status_code: 404
  - id: TC049
    group: Todos
    name: Update_Todo_When_Todo_Does_Not_Belong_To_User_Returns_NotFound
    description: Atualização de um todo que não pertence ao usuário.
    preconditions:
      - "Usuário com token de autenticação {valid_token_1} válido."
      - "Existe um todo criado pelo usuário com token {valid_token_1} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
      - "Usuário com token de autenticação {valid_token_2} válido."
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token_2}"
    request_body:
      title: "Algo atualizado para fazer no futuro"
      isComplete: true
    expected_response:
      status_code: 404
  - id: TC050
    group: Todos
    name: Delete_Todo_When_Valid_Data_Returns_OK
    description: Deleção de um todo existente pelo ID.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
      - "Existe um todo criado pelo usuário com token {valid_token} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: DELETE
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
  - id: TC051
    group: Todos
    name: Delete_Todo_When_ID_Not_Exists_Returns_NotFound
    description: Deleção de um todo com ID que não existe.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
    endpoint: /todos/9999999
    method: DELETE
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 404
  - id: TC052
    group: Todos
    name: Delete_Todo_When_Invalid_Token_Returns_Unauthorized
    description: Deleção de um todo com token inválido.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
      - "Existe um todo criado pelo usuário com token {valid_token} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: DELETE
    headers:
      Authorization: "Bearer invalid_token"
    expected_response:
      status_code: 401
  - id: TC053
    group: Todos
    name: Delete_Todo_When_Missing_Token_Returns_Unauthorized
    description: Deleção de um todo sem token.
    preconditions:
      - "Usuário com token de autenticação {valid_token} válido."
      - "Existe um todo criado pelo usuário com token {valid_token} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: DELETE
    expected_response:
      status_code: 401
  - id: TC054
    group: Todos
    name: Delete_Todo_When_Todo_Does_Not_Belong_To_User_Returns_NotFound
    description: Deleção de um todo que não pertence ao usuário.
    preconditions:
      - "Usuário com token de autenticação {valid_token_1} válido."
      - "Existe um todo criado pelo usuário com token {valid_token_1} com title 'Algo para fazer no futuro' com id armazenado em {todo_id}"
      - "Usuário com token de autenticação {valid_token_2} válido."
    endpoint: /todos/{todo_id}
    method: DELETE
    headers:
      Authorization: "Bearer {valid_token_2}"
    expected_response:
      status_code: 404
```