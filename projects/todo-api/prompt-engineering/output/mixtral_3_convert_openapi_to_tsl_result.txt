```yaml
test_cases:
  - id: TC001
    group: User
    name: Create User When Valid Data Returns OK
    description: Criação de um usuário com dados válidos.
    endpoint: /users
    method: POST
    request_body:
      username: "validUsername"
      password: "ValidPass1!"
    expected_response:
      status_code: 200

  - id: TC002
    group: User
    name: Create User When Username Already Exists Returns BadRequest
    description: Tentativa de criar um usuário com um username que já existe.
    endpoint: /users
    method: POST
    preconditions:
      - "Usuário com username 'existingUser' já existe no sistema."
    request_body:
      username: "existingUser"
      password: "ValidPass1!"
    expected_response:
      status_code: 400

  - id: TC003
    group: User
    name: Create User When Username Is Empty Returns BadRequest
    description: Criação de usuário com username vazio.
    endpoint: /users
    method: POST
    request_body:
      username: ""
      password: "ValidPass1!"
    expected_response:
      status_code: 400

  - id: TC004
    group: User
    name: Create User When Username Has Minimum Size Returns OK
    description: Criação de usuário com username com menor tamanho possível - 1 caractere.
    endpoint: /users
    method: POST
    request_body:
      username: "a"
      password: "ValidPass1!"
    expected_response:
      status_code: 200

  - id: TC005
    group: User
    name: Create User When Username Has Maximum Size Returns OK
    description: Criação de usuário com username com maior tamanho possível - 128 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "a".repeat(128)
      password: "ValidPass1!"
    expected_response:
      status_code: 200

  - id: TC006
    group: User
    name: Create User When Username Exceeds Maximum Size Returns BadRequest
    description: Criação de usuário com username maior que o tamanho máximo - 129 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "a".repeat(129)
      password: "ValidPass1!"
    expected_response:
      status_code: 400

  - id: TC007
    group: User
    name: Create User When Password Is Null Returns BadRequest
    description: Criação de usuário com senha nula.
    endpoint: /users
    method: POST
    request_body:
      username: "validUsername"
      password: null
    expected_response:
      status_code: 400

  - id: TC008
    group: User
    name: Create User When Password Is Empty String Returns BadRequest
    description: Criação de usuário com senha vazia.
    endpoint: /users
    method: POST
    request_body:
      username: "validUsername"
      password: ""
    expected_response:
      status_code: 400

  - id: TC009
    group: User
    name: Create User When Password Too Short Returns BadRequest
    description: Criação de usuário com senha curta - 5 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "validUsername"
      password: "Pass1"
    expected_response:
      status_code: 400

  - id: TC010
    group: User
    name: Create User When Password Has Minimum Size Returns OK
    description: Criação de usuário com senha com menor tamanho possível - 6 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "validUsername"
      password: "Pass1!"
    expected_response:
      status_code: 200

  - id: TC011
    group: User
    name: Create User When Password Has Maximum Size Returns OK
    description: Criação de usuário com senha com maior tamanho possível - 32 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "validUsername"
      password: "P".repeat(31) + "!"
    expected_response:
      status_code: 200

  - id: TC012
    group: User
    name: Create User When Password Exceeds Maximum Size Returns BadRequest
    description: Criação de usuário com senha maior que o tamanho máximo - 33 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "validUsername"
      password: "P".repeat(32) + "!"
    expected_response:
      status_code: 400

  - id: TC013
    group: User
    name: Create User When Password Missing Uppercase Letter Returns BadRequest
    description: Criação de usuário com senha sem letra maiúscula.
    endpoint: /users
    method: POST
    request_body:
      username: "validUsername"
      password: "p@ssw0rd"
    expected_response:
      status_code: 400

  - id: TC014
    group: User
    name: Create User When Password Missing Lowercase Letter Returns BadRequest
    description: Criação de usuário com senha sem letra minúscula.
    endpoint: /users
    method: POST
    request_body:
      username: "validUsername"
      password: "P@SSW0RD"
    expected_response:
      status_code: 400

  - id: TC015
    group: User
    name: Create User When Password Missing Digit Returns BadRequest
    description: Criação de usuário com senha sem dígito.
    endpoint: /users
    method: POST
    request_body:
      username: "validUsername"
      password: "P@ssword"
    expected_response:
      status_code: 400

  - id: TC016
    group: User
    name: Create User When Password Missing Non-Alphanumeric Character Returns BadRequest
    description: Criação de usuário com senha sem caractere não alfanumérico.
    endpoint: /users
    method: POST
    request_body:
      username: "validUsername"
      password: "Passw0rd"
    expected_response:
      status_code: 400

  - id: TC017
    group: User
    name: Authenticate User When Valid Data Returns OK
    description: Autenticação de usuário com credenciais válidas.
    endpoint: /users/token
    method: POST
    preconditions:
      - "Usuário com username 'validUsername' e senha 'ValidPass1!' existe."
    request_body:
      username: "validUsername"
      password: "ValidPass1!"
    expected_response:
      status_code: 200
      body:
        token: is string not empty

  - id: TC018
    group: User
    name: Authenticate User When Invalid Password Returns BadRequest
    description: Autenticação de usuário com senha inválida.
    preconditions:
      - "Usuário com username 'validUsername' e senha 'ValidPass1!' existe."
    endpoint: /users/token
    method: POST
    request_body:
      username: "validUsername"
      password: "InvalidPass1!"
    expected_response:
      status_code: 400

  - id: TC019
    group: User
    name: Authenticate User When Invalid Username Returns BadRequest
    description: Autenticação de usuário com username inválido.
    preconditions:
      - "Usuário com username 'validUsername' e senha 'ValidPass1!' existe."
    endpoint: /users/token
    method: POST
    request_body:
      username: "invalidUsername"
      password: "ValidPass1!"
    expected_response:
      status_code: 400

  - id: TC020
    group: Todo
    name: List Todos When Valid Token Returns OK
    description: Listagem de todos com token válido.
    endpoint: /todos
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200

  - id: TC021
    group: Todo
    name: List Todos When Invalid Token Returns Unauthorized
    description: Listagem de todos com token inválido.
    endpoint: /todos
    method: GET
    headers:
      Authorization: "Bearer invalidtoken"
    expected_response:
      status_code: 401

  - id: TC022
    group: Todo
    name: List Todos When No Token Returns Unauthorized
    description: Listagem de todos sem token.
    endpoint: /todos
    method: GET
    expected_response:
      status_code: 401

  - id: TC023
    group: Todo
    name: Create Todo When Valid Data Returns Created
    description: Criação de todo com dados válidos.
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Valid Todo"
    expected_response:
      status_code: 201
      body:
        id: is integer greater than 0
        title: "Valid Todo"
        isComplete: false

  - id: TC024
    group: Todo
    name: Create Todo When Title Is Empty Returns BadRequest
    description: Criação de todo com título vazio.
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: ""
    expected_response:
      status_code: 400

  - id: TC025
    group: Todo
    name: Create Todo When Title Exceeds Maximum Length Returns BadRequest
    description: Criação de todo com título maior que o tamanho máximo - 257 caracteres.
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "a".repeat(257)
    expected_response:
      status_code: 400

  - id: TC026
    group: Todo
    name: Create Todo When No Token Returns Unauthorized
    description: Criação de todo sem token.
    endpoint: /todos
    method: POST
    request_body:
      title: "Valid Todo"
    expected_response:
      status_code: 401

  - id: TC027
    group: Todo
    name: Create Todo When Invalid Token Returns Unauthorized
    description: Criação de todo com token inválido.
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer invalidtoken"
    request_body:
      title: "Valid Todo"
    expected_response:
      status_code: 401

  - id: TC028
    group: Todo
    name: Get Todo When Valid Data Returns OK
    description: Obter todo existente pelo ID.
    preconditions:
      - "Existe um token de autenticação {valid_token} válido para o usuário."
      - "Existe um todo criado com título 'Valid Todo' e id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
      body:
        id: {todo_id}
        title: "Valid Todo"
        isComplete: false

  - id: TC029
    group: Todo
    name: Get Todo When ID Does Not Exist Returns NotFound
    description: Tentativa de obter todo com ID que não existe.
    endpoint: /todos/9999999
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 404

  - id: TC030
    group: Todo
    name: Get Todo When No Token Returns Unauthorized
    description: Tentativa de obter todo sem token.
    endpoint: /todos/1
    method: GET
    expected_response:
      status_code: 401

  - id: TC031
    group: Todo
    name: Get Todo When Invalid Token Returns Unauthorized
    description: Tentativa de obter todo com token inválido.
    endpoint: /todos/1
    method: GET
    headers:
      Authorization: "Bearer invalidtoken"
    expected_response:
      status_code: 401

  - id: TC032
    group: Todo
    name: Update Todo When Valid Data Returns OK
    description: Atualização de todo com dados válidos.
    preconditions:
      - "Existe um token de autenticação {valid_token} válido para o usuário."
      - "Existe um todo criado com título 'Valid Todo' e id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Updated Todo"
      isComplete: true
    expected_response:
      status_code: 200
      body:
        id: {todo_id}
        title: "Updated Todo"
        isComplete: true

  - id: TC033
    group: Todo
    name: Update Todo When Title Is Empty Returns BadRequest
    description: Atualização de todo com título vazio.
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: ""
      isComplete: true
    expected_response:
      status_code: 400

  - id: TC034
    group: Todo
    name: Update Todo When Title Exceeds Maximum Length Returns BadRequest
    description: Atualização de todo com título maior que o tamanho máximo - 257 caracteres.
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "a".repeat(257)
      isComplete: true
    expected_response:
      status_code: 400

  - id: TC035
    group: Todo
    name: Update Todo When No Token Returns Unauthorized
    description: Atualização de todo sem token.
    endpoint: /todos/{todo_id}
    method: PUT
    request_body:
      title: "Updated Todo"
      isComplete: true
    expected_response:
      status_code: 401

  - id: TC036
    group: Todo
    name: Update Todo When Invalid Token Returns Unauthorized
    description: Atualização de todo com token inválido.
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer invalidtoken"
    request_body:
      title: "Updated Todo"
      isComplete: true
    expected_response:
      status_code: 401

  - id: TC037
    group: Todo
    name: Delete Todo When Valid Data Returns OK
    description: Exclusão de todo existente.
    preconditions:
      - "Existe um token de autenticação {valid_token} válido para o usuário."
      - "Existe um todo criado com título 'Valid Todo' e id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: DELETE
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200

  - id: TC038
    group: Todo
    name: Delete Todo When ID Does Not Exist Returns NotFound
    description: Tentativa de excluir todo com ID que não existe.
    endpoint: /todos/9999999
    method: DELETE
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 404

  - id: TC039
    group: Todo
    name: Delete Todo When No Token Returns Unauthorized
    description: Tentativa de excluir todo sem token.
    endpoint: /todos/1
    method: DELETE
    expected_response:
      status_code: 401

  - id: TC040
    group: Todo
    name: Delete Todo When Invalid Token Returns Unauthorized
    description: Tentativa de excluir todo com token inválido.
    endpoint: /todos/1
    method: DELETE
    headers:
      Authorization: "Bearer invalidtoken"
    expected_response:
      status_code: 401
```