```yaml
test_cases:
  - id: TC001
    group: User
    name: Create User When Valid Data Returns OK
    description: Criação de um usuário com dados válidos.
    endpoint: /users
    method: POST
    request_body:
      username: "my_username"
      password: "P@ssw0rd"
    expected_response:
      status_code: 200

  - id: TC002
    group: User
    name: Create User When Username Already Exists Returns BadRequest
    description: Tentativa de criar um usuário com um username que já existe.
    endpoint: /users
    method: POST
    preconditions:
      - "Usuário com username 'existing_username' já existe no sistema."
    request_body:
      username: "existing_username"
      password: "P@ssw0rd"
    expected_response:
      status_code: 400

  - id: TC003
    group: User
    name: Create User When Invalid Username Format Returns BadRequest
    description: Criação de usuário com username inválido (contém caracteres não permitidos).
    endpoint: /users
    method: POST
    request_body:
      username: "invalid#username"
      password: "P@ssw0rd"
    expected_response:
      status_code: 400

  - id: TC004
    group: User
    name: Create User When Username Is Null Returns BadRequest
    description: Criação de usuário com username nulo.
    endpoint: /users
    method: POST
    request_body:
      username: null
      password: "P@ssw0rd"
    expected_response:
      status_code: 400

  - id: TC005
    group: User
    name: Create User When Username Is Empty String Returns BadRequest
    description: Criação de usuário com username vazio.
    endpoint: /users
    method: POST
    request_body:
      username: ""
      password: "P@ssw0rd"
    expected_response:
      status_code: 400

  - id: TC006
    group: User
    name: Create User When Username Too Short Returns BadRequest
    description: Criação de usuário com username curto - 0 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: ""
      password: "P@ssw0rd"
    expected_response:
      status_code: 400

  - id: TC007
    group: User
    name: Create User When Username Too Long Returns BadRequest
    description: Criação de usuário com username longo - 129 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "validusernameabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab"
      password: "P@ssw0rd"
    expected_response:
      status_code: 400

  - id: TC008
    group: User
    name: Create User When Username Has Minimum Size Returns OK
    description: Criação de usuário com username com menor tamanho possível - 1 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "a"
      password: "P@ssw0rd"
    expected_response:
      status_code: 200
      body:
        token: is string not empty

  - id: TC009
    group: User
    name: Create User When Username Has Maximum Size Returns OK
    description: Criação de usuário com username com maior tamanho possível - 128 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "validusernameabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
      password: "P@ssw0rd"
    expected_response:
      status_code: 200
      body:
        token: is string not empty

  - id: TC010
    group: User
    name: Create User When Password Is Null Returns BadRequest
    description: Criação de usuário com senha nula.
    endpoint: /users
    method: POST
    request_body:
      username: "validusername1"
      password: null
    expected_response:
      status_code: 400

  - id: TC011
    group: User
    name: Create User When Password Is Empty String Returns BadRequest
    description: Criação de usuário com senha vazia.
    endpoint: /users
    method: POST
    request_body:
      username: "validusername2"
      password: ""
    expected_response:
      status_code: 400

  - id: TC012
    group: User
    name: Create User When Password Too Short Returns BadRequest
    description: Criação de usuário com senha curta - 5 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "validusername3"
      password: "Abcde"
    expected_response:
      status_code: 400

  - id: TC013
    group: User
    name: Create User When Password Too Long Returns BadRequest
    description: Criação de usuário com senha longa - 33 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "validusername4"
      password: "Abcdefghijklmnopqrstuvwxyz1234"
    expected_response:
      status_code: 400

  - id: TC014
    group: User
    name: Create User When Password Missing Uppercase Letter Returns BadRequest
    description: Criação de usuário com senha sem letra maiúscula.
    endpoint: /users
    method: POST
    request_body:
      username: "validusername5"
      password: "abcdef12!@#"
    expected_response:
      status_code: 400

  - id: TC015
    group: User
    name: Create User When Password Missing Lowercase Letter Returns BadRequest
    description: Criação de usuário com senha sem letra minúscula.
    endpoint: /users
    method: POST
    request_body:
      username: "validusername6"
      password: "ABCDEFG12!@#"
    expected_response:
      status_code: 400

  - id: TC016
    group: User
    name: Create User When Password Missing Digit Returns BadRequest
    description: Criação de usuário com senha sem dígito.
    endpoint: /users
    method: POST
    request_body:
      username: "validusername7"
      password: "Abcdefghijklmnop!@#"
    expected_response:
      status_code: 400

  - id: TC017
    group: User
    name: Create User When Password Missing Non-Alphanumeric Character Returns BadRequest
    description: Criação de usuário com senha sem caractere não alfanumérico.
    endpoint: /users
    method: POST
    request_body:
      username: "validusername8"
      password: "Abcdefgh123456"
    expected_response:
      status_code: 400

  - id: TC018
    group: User
    name: Create User When Password Has Minimum Size Returns OK
    description: Criação de usuário com senha com menor tamanho possível - 6 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "validusername9"
      password: "Abc1!@"
    expected_response:
      status_code: 200

  - id: TC019
    group: User
    name: Create User When Password Has Maximum Size Returns OK
    description: Criação de usuário com senha com maior tamanho possível - 32 caracteres.
    endpoint: /users
    method: POST
    request_body:
      username: "validusername10"
      password: "Abcdefghijklmnop123456!@#$"
    expected_response:
      status_code: 200

  - id: TC020
    group: User
    name: Authenticate User When Valid Data Returns OK
    description: Autenticação de usuário com credenciais válidas.
    endpoint: /users/token
    method: POST
    preconditions:
      - "Usuário com username 'validUsername11' e senha 'P@ssw0rd1' existe."
    request_body:
      username: "validUsername11"
      password: "P@ssw0rd1"
    expected_response:
      status_code: 200
      body:
        token: is string not empty

  - id: TC021
    group: User
    name: Authenticate User When Invalid Password Returns BadRequest
    description: Autenticação de usuário com senha inválida.
    prconditions:
      - "Usuário com username 'validUsername12' e senha 'P@ssw0rd2' existe."
    endpoint: /users/token
    method: POST
    request_body:
      username: "validUsername12"
      password: "WrongPass1"
    expected_response:
      status_code: 400

  - id: TC022
    group: User
    name: Authenticate User When Invalid Username Returns BadRequest
    description: Autenticação de usuário com username inválido.
    prconditions:
      - "Usuário com username 'validUsername13' e senha 'P@ssw0rd3' existe."
    endpoint: /users/token
    method: POST
    request_body:
      username: "invalidUsername"
      password: "P@ssw0rd3"
    expected_response:
      status_code: 400

  - id: TC023
    group: Todos
    name: List Todos When No Todos Returns OK
    description: Listando todos sem ter nenhum registrado.
    preconditions:
      - "Usuário com username 'validUsername14' e senha 'P@ssw0rd4' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername14'"
    endpoint: /todos
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
      body: []

  - id: TC024
    group: Todos
    name: List Todos When There Are Todos Returns OK
    description: Listando todos com itens registrados.
    preconditions:
      - "Usuário com username 'validUsername15' e senha 'P@ssw0rd5' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername15'"
      - "Existe um todo criado com title 'Something todo' e isComplete false com id armazenado em {todo_id}"
    endpoint: /todos
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
      body:
        - id: {todo_id}
          title: "Something todo"
          isComplete: false

  - id: TC025
    group: Todos
    name: List Todos When Token Is Invalid Returns Unauthorized
    description: Listando todos com token inválido.
    endpoint: /todos
    method: GET
    headers:
      Authorization: "Bearer invalidtoken"
    expected_response:
      status_code: 401

  - id: TC026
    group: Todos
    name: List Todos When Without Token Returns Unauthorized
    description: Listando todos sem token.
    endpoint: /todos
    method: GET
    expected_response:
      status_code: 401

  - id: TC027
    group: Todos
    name: Create Todo When Valid Data Returns Created
    description: Criação de todo com dados válidos.
    preconditions:
      - "Usuário com username 'validUsername16' e senha 'P@ssw0rd6' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername16'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Buy Milk"
    expected_response:
      status_code: 201
      body:
        id: is integer greater than 0
        title: "Buy Milk"
        isComplete: false

  - id: TC028
    group: Todos
    name: Create Todo When Title Is Null Returns BadRequest
    description: Criação de todo com título nulo.
    preconditions:
      - "Usuário com username 'validUsername17' e senha 'P@ssw0rd7' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername17'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: null
    expected_response:
      status_code: 400

  - id: TC029
    group: Todos
    name: Create Todo When Title Is Empty String Returns BadRequest
    description: Criação de todo com título vazio.
    preconditions:
      - "Usuário com username 'validUsername18' e senha 'P@ssw0rd8' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername18'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: ""
    expected_response:
      status_code: 400

  - id: TC030
    group: Todos
    name: Create Todo When Title Too Short Returns BadRequest
    description: Criação de todo com título curto - 0 caracteres.
    preconditions:
      - "Usuário com username 'validUsername19' e senha 'P@ssw0rd9' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername19'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: ""
    expected_response:
      status_code: 400

  - id: TC031
    group: Todos
    name: Create Todo When Title Too Long Returns BadRequest
    description: Criação de todo com título longo - 257 caracteres.
    preconditions:
      - "Usuário com username 'validUsername20' e senha 'P@ssw0rd10' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername20'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "A long title that exceeds the maximum length allowed for a todo title in this application to trigger the validation error that was configured in the application to ensure titles have a maximum length of 256 characters"
    expected_response:
      status_code: 400

  - id: TC032
    group: Todos
    name: Create Todo When Title Has Minimum Size Returns Created
    description: Criação de todo com título com menor tamanho possível - 1 caracteres.
    preconditions:
      - "Usuário com username 'validUsername21' e senha 'P@ssw0rd11' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername21'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "?"
    expected_response:
      status_code: 201
      body:
        id: is integer greater than 0
        title: "?"
        isComplete: false

  - id: TC033
    group: Todos
    name: Create Todo When Title Has Maximum Size Returns Created
    description: Criação de todo com título com maior tamanho possível - 256 caracteres.
    preconditions:
      - "Usuário com username 'validUsername22' e senha 'P@ssw0rd12' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername22'"
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the.lazy dog."
    expected_response:
      status_code: 201
      body:
        id: is integer greater than 0
        title: "A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the.lazy dog."
        isComplete: false

  - id: TC034
    group: Todos
    name: Create Todo When Token Is Invalid Returns Unauthorized
    description: Criação de todo com token inválido.
    endpoint: /todos
    method: POST
    headers:
      Authorization: "Bearer invalidtoken"
    request_body:
      title: "Important Todo"
    expected_response:
      status_code: 401

  - id: TC035
    group: Todos
    name: Create Todo When Without Token Returns Unauthorized
    description: Criação de todo sem token.
    endpoint: /todos
    method: POST
    request_body:
      title: "Important Todo"
    expected_response:
      status_code: 401

  - id: TC036
    group: Todos
    name: Get Todo When Valid Data Returns OK
    description: Obtendo um todo existente pelo ID.
    preconditions:
      - "Usuário com username 'validUsername23' e senha 'P@ssw0rd13' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername23'"
      - "Existe um todo criado com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200
      body:
        id: {todo_id}
        title: "Buy Milk"
        isComplete: false

  - id: TC037
    group: Todos
    name: Get Todo When ID Not Exists Returns NotFound
    description: Tentativa de obter um todo com ID que não existe.
    preconditions:
      - "Usuário com username 'validUsername24' e senha 'P@ssw0rd14' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername24'"
    endpoint: /todos/9999999
    method: GET
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 404

  - id: TC038
    group: Todos
    name: Get Todo When Token Is Invalid Returns Unauthorized
    description: Tentativa de obter um todo com token inválido.
    endpoint: /todos/1
    method: GET
    headers:
      Authorization: "Bearer invalidtoken"
    expected_response:
      status_code: 401

  - id: TC039
    group: Todos
    name: Get Todo When Without Token Returns Unauthorized
    description: Tentativa de obter um todo sem token.
    endpoint: /todos/1
    method: GET
    expected_response:
      status_code: 401

  - id: TC040
    group: Todos
    name: Get Todo When Token From Other User Returns NotFound
    description: Tentativa de obter um todo existente pelo ID com token de outro usuário.
    preconditions:
      - "Usuário com username 'validUsername25' e senha 'P@ssw0rd15' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername25'"
      - "Existe um todo criado pelo usuário 'validUsername25' com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
      - "Usuário com username 'validUsername26' e senha 'P@ssw0rd16' existe."
      - "Existe um token de autenticação {other_valid_token} válido para o usuário com username 'validUsername26'"
    endpoint: /todos/{todo_id}
    method: GET
    headers:
      Authorization: "Bearer {other_valid_token}"
    expected_response:
      status_code: 404

  - id: TC041
    group: Todos
    name: Update Todo When Valid Data Returns OK
    description: Atualizando um todo com dados válidos.
    preconditions:
      - "Usuário com username 'validUsername27' e senha 'P@ssw0rd17' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername27'"
      - "Existe um todo criado pelo usuário 'validUsername27' com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Buy Milk Later"
      isComplete: true
    expected_response:
      status_code: 200
      body:
        id: {todo_id}
        title: "Buy Milk Later"
        isComplete: true

  - id: TC042
    group: Todos
    name: Update Todo When Title Is Null Returns BadRequest
    description: Atualizando um todo com título nulo.
    preconditions:
      - "Usuário com username 'validUsername28' e senha 'P@ssw0rd18' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername28'"
      - "Existe um todo criado pelo usuário 'validUsername28' com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: null
      isComplete: true
    expected_response:
      status_code: 400

  - id: TC043
    group: Todos
    name: Update Todo When Title Is Empty String Returns BadRequest
    description: Atualizando um todo com título vazio.
    preconditions:
      - "Usuário com username 'validUsername29' e senha 'P@ssw0rd19' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername29'"
      - "Existe um todo criado pelo usuário 'validUsername29' com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: ""
      isComplete: true
    expected_response:
      status_code: 400

  - id: TC044
    group: Todos
    name: Update Todo When Title Too Short Returns BadRequest
    description: Atualizando um todo com título curto - 0 caracteres.
    preconditions:
      - "Usuário com username 'validUsername30' e senha 'P@ssw0rd20' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername30'"
      - "Existe um todo criado pelo usuário 'validUsername30' com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: ""
      isComplete: true
    expected_response:
      status_code: 400

  - id: TC045
    group: Todos
    name: Update Todo When Title Too Long Returns BadRequest
    description: Atualizando um todo com título longo - 257 caracteres.
    preconditions:
      - "Usuário com username 'validUsername31' e senha 'P@ssw0rd21' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername31'"
      - "Existe um todo criado pelo usuário 'validUsername31' com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "A long title that exceeds the maximum length allowed for a todo title in this application to trigger the validation error that was configured in the application to ensure titles have a maximum length of 256 characters"
      isComplete: true
    expected_response:
      status_code: 400

  - id: TC046
    group: Todos
    name: Update Todo When Title Has Minimum Size Returns OK
    description: Atualizando um todo com título com menor tamanho possível - 1 caracteres.
    preconditions:
      - "Usuário com username 'validUsername32' e senha 'P@ssw0rd22' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername32'"
      - "Existe um todo criado pelo usuário 'validUsername32' com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "?"
      isComplete: true
    expected_response:
      status_code: 200
      body:
        id: {todo_id}
        title: "?"
        isComplete: true

  - id: TC047
    group: Todos
    name: Update Todo When Title Has Maximum Size Returns OK
    description: Atualizando um todo com título com maior tamanho possível - 256 caracteres.
    preconditions:
      - "Usuário com username 'validUsername33' e senha 'P@ssw0rd23' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername33'"
      - "Existe um todo criado pelo usuário 'validUsername33' com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the.lazy dog."
      isComplete: true
    expected_response:
      status_code: 200
      body:
        id: {todo_id}
        title: "A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the lazy dog. A quick brown fox jumps over the.lazy dog."
        isComplete: true

  - id: TC048
    group: Todos
    name: Update Todo When Missing isComplete Returns BadRequest
    description: Atualizando um todo sem o campo isComplete.
    preconditions:
      - "Usuário com username 'validUsername34' e senha 'P@ssw0rd24' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername34'"
      - "Existe um todo criado pelo usuário 'validUsername34' com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      title: "Buy Milk Later"
    expected_response:
      status_code: 400

  - id: TC049
    group: Todos
    name: Update Todo When Missing Title Returns BadRequest
    description: Atualizando um todo sem o campo title.
    preconditions:
      - "Usuário com username 'validUsername35' e senha 'P@ssw0rd25' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername35'"
      - "Existe um todo criado pelo usuário 'validUsername35' com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {valid_token}"
    request_body:
      isComplete: true
    expected_response:
      status_code: 400

  - id: TC050
    group: Todos
    name: Update Todo When Token Is Invalid Returns Unauthorized
    description: Atualizando um todo com token inválido.
    endpoint: /todos/1
    method: PUT
    headers:
      Authorization: "Bearer invalidtoken"
    request_body:
      title: "Buy Milk Later"
      isComplete: true
    expected_response:
      status_code: 401

  - id: TC051
    group: Todos
    name: Update Todo When Without Token Returns Unauthorized
    description: Atualizando um todo sem token.
    endpoint: /todos/1
    method: PUT
    request_body:
      title: "Buy Milk Later"
      isComplete: true
    expected_response:
      status_code: 401

  - id: TC052
    group: Todos
    name: Update Todo When Token From Other User Returns NotFound
    description: Tentativa de atualizar um todo existente pelo ID com token de outro usuário.
    preconditions:
      - "Usuário com username 'validUsername36' e senha 'P@ssw0rd26' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername36'"
      - "Existe um todo criado pelo usuário 'validUsername36' com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
      - "Usuário com username 'validUsername37' e senha 'P@ssw0rd27' existe."
      - "Existe um token de autenticação {other_valid_token} válido para o usuário com username 'validUsername37'"
    endpoint: /todos/{todo_id}
    method: PUT
    headers:
      Authorization: "Bearer {other_valid_token}"
    request_body:
      title: "Buy Milk Later"
      isComplete: true
    expected_response:
      status_code: 404

  - id: TC053
    group: Todos
    name: Delete Todo When Valid Data Returns OK
    description: Deletando um todo existente pelo ID.
    preconditions:
      - "Usuário com username 'validUsername38' e senha 'P@ssw0rd28' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername38'"
      - "Existe um todo criado pelo usuário 'validUsername38' com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
    endpoint: /todos/{todo_id}
    method: DELETE
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 200

  - id: TC054
    group: Todos
    name: Delete Todo When ID Not Exists Returns NotFound
    description: Tentativa de deletar um todo com ID que não existe.
    preconditions:
      - "Usuário com username 'validUsername39' e senha 'P@ssw0rd29' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername39'"
    endpoint: /todos/9999999
    method: DELETE
    headers:
      Authorization: "Bearer {valid_token}"
    expected_response:
      status_code: 404

  - id: TC055
    group: Todos
    name: Delete Todo When Token Is Invalid Returns Unauthorized
    description: Tentativa de deletar um todo com token inválido.
    endpoint: /todos/1
    method: DELETE
    headers:
      Authorization: "Bearer invalidtoken"
    expected_response:
      status_code: 401

  - id: TC056
    group: Todos
    name: Delete Todo When Without Token Returns Unauthorized
    description: Tentativa de deletar um todo sem token.
    endpoint: /todos/1
    method: DELETE
    expected_response:
      status_code: 401

  - id: TC057
    group: Todos
    name: Delete Todo When Token From Other User Returns NotFound
    description: Tentativa de deletar um todo existente pelo ID com token de outro usuário.
    preconditions:
      - "Usuário com username 'validUsername40' e senha 'P@ssw0rd30' existe."
      - "Existe um token de autenticação {valid_token} válido para o usuário com username 'validUsername40'"
      - "Existe um todo criado pelo usuário 'validUsername40' com title 'Buy Milk' e isComplete false com id armazenado em {todo_id}"
      - "Usuário com username 'validUsername41' e senha 'P@ssw0rd31' existe."
      - "Existe um token de autenticação {other_valid_token} válido para o usuário com username 'validUsername41'"
    endpoint: /todos/{todo_id}
    method: DELETE
    headers:
      Authorization: "Bearer {other_valid_token}"
    expected_response:
      status_code: 404
```