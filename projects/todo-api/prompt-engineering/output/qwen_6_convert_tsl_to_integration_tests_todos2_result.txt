```csharp
// File: TodosIntegrationTests.cs

using Microsoft.AspNetCore.Mvc.Testing;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.Http.Json;
using System.Text.Json.Nodes;
using System.Net;
using System.Threading.Tasks;
using System.Collections.Generic;
using Xunit;
using System;

namespace IntegrationTests
{
    public class TodosIntegrationTests : IClassFixture<WebApplicationFactory<Program>>
    {
        private readonly WebApplicationFactory<Program> _factory;
        private readonly HttpClient _client;

        public TodosIntegrationTests(WebApplicationFactory<Program> factory)
        {
            _factory = factory;
            _client = _factory.CreateClient();
        }

        private async Task<string> CreateUserAndGetTokenAsync(string username, string password)
        {
            var createUserResponse = await CreateUserAsync(username, password);
            var tokenResponse = await CreateTokenAsync(username, password);

            var responseBody = await tokenResponse.Content.ReadFromJsonAsync<JsonObject>();
            return responseBody["token"].AsValue().GetValue<string>();
        }

        private async Task<HttpResponseMessage> CreateUserAsync(string username, string password)
        {
            var request = new
            {
                username = username,
                password = password
            };

            return await _client.PostAsJsonAsync("/users", request);
        }

        private async Task<HttpResponseMessage> CreateTokenAsync(string username, string password)
        {
            var request = new
            {
                username = username,
                password = password
            };

            return await _client.PostAsJsonAsync("/users/token", request);
        }

        private async Task<HttpResponseMessage> CreateTodoAsync(string token, string title)
        {
            var requestBody = new
            {
                title = title
            };

            var request = new HttpRequestMessage(HttpMethod.Post, "/todos")
            {
                Content = JsonContent.Create(requestBody)
            };

            if (token != null)
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }

            return await _client.SendAsync(request);
        }

        private async Task<int> CreateTodoAndGetIdAsync(string token, string title)
        {
            var response = await CreateTodoAsync(token, title);
            var responseBody = await response.Content.ReadFromJsonAsync<JsonObject>();
            return responseBody["id"].AsValue().GetValue<int>();
        }

        private async Task<HttpResponseMessage> UpdateTodoAsync(string token, int id, string title, bool isComplete)
        {
            var requestBody = new
            {
                title = title,
                isComplete = isComplete
            };

            var request = new HttpRequestMessage(HttpMethod.Put, $"/todos/{id}")
            {
                Content = JsonContent.Create(requestBody)
            };

            if (token != null)
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }

            return await _client.SendAsync(request);
        }

        private async Task<HttpResponseMessage> DeleteTodoAsync(string token, int id)
        {
            var request = new HttpRequestMessage(HttpMethod.Delete, $"/todos/{id}");

            if (token != null)
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }

            return await _client.SendAsync(request);
        }

        private async Task<HttpResponseMessage> GetTodoAsync(string token, int id)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/todos/{id}");

            if (token != null)
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }

            return await _client.SendAsync(request);
        }

        private async Task<HttpResponseMessage> ListTodosAsync(string token)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/todos");

            if (token != null)
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }

            return await _client.SendAsync(request);
        }

        [Fact]
        public async Task TC023_List_Todos_When_No_Todos_Returns_OK()
        {
            // arrange
            string username = "validUsername150";
            string password = "P@ssw0rd150";
            var token = await CreateUserAndGetTokenAsync(username, password); // precondition 1 and 2

            // act
            var response = await ListTodosAsync(token);

            // assert
            var responseBody = await response.Content.ReadFromJsonAsync<List<JsonObject>>();
            Assert.Empty(responseBody);
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        [Fact]
        public async Task TC024_List_Todos_When_There_Are_Todos_Returns_OK()
        {
            // arrange
            string username = "validUsername151";
            string password = "P@ssw0rd151";
            string title = "Buy Milk";
            var token = await CreateUserAndGetTokenAsync(username, password); // precondition 1 and 2
            int todoId = await CreateTodoAndGetIdAsync(token, title); // precondition 3

            // act
            var response = await ListTodosAsync(token);

            // assert
            var responseBody = await response.Content.ReadFromJsonAsync<List<JsonObject>>();
            Assert.NotEmpty(responseBody);
            Assert.Equal(todoId, responseBody[0]["id"].AsValue().GetValue<int>());
            Assert.Equal(title, responseBody[0]["title"].AsValue().GetValue<string>());
            Assert.Equal(false, responseBody[0]["isComplete"].AsValue().GetValue<bool>());
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        [Fact]
        public async Task TC025_List_Todos_When_Token_Is_Invalid_Returns_Unauthorized()
        {
            // arrange
            string invalidToken = "invalidtoken";

            // act
            var response = await ListTodosAsync(invalidToken);

            // assert
            Assert.Equal(HttpStatusCode.Unauthorized, response.StatusCode);
        }

        [Fact]
        public async Task TC026_List_Todos_When_Without_Token_Returns_Unauthorized()
        {
            // arrange

            // act
            var response = await ListTodosAsync(null);

            // assert
            Assert.Equal(HttpStatusCode.Unauthorized, response.StatusCode);
        }

        [Fact]
        public async Task TC036_Get_Todo_When_Valid_Data_Returns_OK()
        {
            // arrange
            string username = "validUsername160";
            string password = "P@ssw0rd160";
            string title = "Buy Milk";
            var token = await CreateUserAndGetTokenAsync(username, password); // precondition 1 and 2
            int todoId = await CreateTodoAndGetIdAsync(token, title); // precondition 3

            // act
            var response = await GetTodoAsync(token, todoId);

            // assert
            var responseBody = await response.Content.ReadFromJsonAsync<JsonObject>();
            var responseBodyId = responseBody["id"].AsValue().GetValue<int>();
            var responseBodyTitle = responseBody["title"].AsValue().GetValue<string>();
            var responseBodyIsComplete = responseBody["isComplete"].AsValue().GetValue<bool>();
            Assert.Equal(todoId, responseBodyId);
            Assert.Equal(title, responseBodyTitle);
            Assert.Equal(false, responseBodyIsComplete);
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }
    }
}
